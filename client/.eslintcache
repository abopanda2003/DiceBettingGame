[{"D:\\workspace\\react\\betting demos\\project\\client\\src\\index.js":"1","D:\\workspace\\react\\betting demos\\project\\client\\src\\App.js":"2","D:\\workspace\\react\\betting demos\\project\\client\\src\\reportWebVitals.js":"3","D:\\workspace\\react\\betting demos\\project\\client\\src\\store\\configureStore.js":"4","D:\\workspace\\react\\betting demos\\project\\client\\src\\reducers\\cardsReducer.js":"5","D:\\workspace\\react\\betting demos\\project\\client\\src\\route\\index.js":"6","D:\\workspace\\react\\betting demos\\project\\client\\src\\actions\\actionTypes.js":"7","D:\\workspace\\react\\betting demos\\project\\client\\src\\pages\\farming.js":"8","D:\\workspace\\react\\betting demos\\project\\client\\src\\pages\\dividend.js":"9","D:\\workspace\\react\\betting demos\\project\\client\\src\\pages\\referral.js":"10","D:\\workspace\\react\\betting demos\\project\\client\\src\\pages\\dashboard.js":"11","D:\\workspace\\react\\betting demos\\project\\client\\src\\pages\\classic_dice.js":"12","D:\\workspace\\react\\betting demos\\project\\client\\src\\pages\\careful.js":"13","D:\\workspace\\react\\betting demos\\project\\client\\src\\pages\\dice_ll.js":"14","D:\\workspace\\react\\betting demos\\project\\client\\src\\pages\\referral_dice.js":"15","D:\\workspace\\react\\betting demos\\project\\client\\src\\components\\Footer.js":"16","D:\\workspace\\react\\betting demos\\project\\client\\src\\components\\LiveTable.js":"17","D:\\workspace\\react\\betting demos\\project\\client\\src\\components\\farming_card2.js":"18","D:\\workspace\\react\\betting demos\\project\\client\\src\\components\\farming_card1.js":"19","D:\\workspace\\react\\betting demos\\project\\client\\src\\components\\referral_table.js":"20","D:\\workspace\\react\\betting demos\\project\\client\\src\\components\\Header.js":"21","D:\\workspace\\react\\betting demos\\project\\client\\src\\components\\careful_card2.js":"22","D:\\workspace\\react\\betting demos\\project\\client\\src\\components\\careful_card1.js":"23","D:\\workspace\\react\\betting demos\\project\\client\\src\\components\\referal_card.js":"24","D:\\workspace\\react\\betting demos\\project\\client\\src\\components\\careful_card3.js":"25","D:\\workspace\\react\\betting demos\\project\\client\\src\\components\\Card.js":"26","D:\\workspace\\react\\betting demos\\project\\client\\src\\actions\\actions.js":"27"},{"size":600,"mtime":1613745985000,"results":"28","hashOfConfig":"29"},{"size":1677,"mtime":1621962927626,"results":"30","hashOfConfig":"29"},{"size":375,"mtime":1613725938000,"results":"31","hashOfConfig":"29"},{"size":243,"mtime":1613724062000,"results":"32","hashOfConfig":"29"},{"size":1381,"mtime":1617412891000,"results":"33","hashOfConfig":"29"},{"size":1032,"mtime":1619881995000,"results":"34","hashOfConfig":"29"},{"size":176,"mtime":1617412436000,"results":"35","hashOfConfig":"29"},{"size":11618,"mtime":1618627187000,"results":"36","hashOfConfig":"29"},{"size":0,"mtime":1616504630000,"results":"37","hashOfConfig":"29"},{"size":11813,"mtime":1622411921049,"results":"38","hashOfConfig":"29"},{"size":7815,"mtime":1620403553000,"results":"39","hashOfConfig":"29"},{"size":20725,"mtime":1623876124921,"results":"40","hashOfConfig":"29"},{"size":12884,"mtime":1618627167000,"results":"41","hashOfConfig":"29"},{"size":21119,"mtime":1622336684989,"results":"42","hashOfConfig":"29"},{"size":22294,"mtime":1622805490537,"results":"43","hashOfConfig":"29"},{"size":1996,"mtime":1620065789000,"results":"44","hashOfConfig":"29"},{"size":2512,"mtime":1619784098000,"results":"45","hashOfConfig":"29"},{"size":2238,"mtime":1616468129000,"results":"46","hashOfConfig":"29"},{"size":2146,"mtime":1616453727000,"results":"47","hashOfConfig":"29"},{"size":2741,"mtime":1619975908000,"results":"48","hashOfConfig":"29"},{"size":3712,"mtime":1622036692447,"results":"49","hashOfConfig":"29"},{"size":388,"mtime":1616503172000,"results":"50","hashOfConfig":"29"},{"size":327,"mtime":1616503178000,"results":"51","hashOfConfig":"29"},{"size":1271,"mtime":1616525322000,"results":"52","hashOfConfig":"29"},{"size":1094,"mtime":1616508006000,"results":"53","hashOfConfig":"29"},{"size":1107,"mtime":1616693469000,"results":"54","hashOfConfig":"29"},{"size":377,"mtime":1617412462000,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"pamq2r",{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"58"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"58"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"58"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"58"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"58"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"58"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"D:\\workspace\\react\\betting demos\\project\\client\\src\\index.js",[],["122","123"],"D:\\workspace\\react\\betting demos\\project\\client\\src\\App.js",["124","125","126"],"import React, {useEffect, useState} from 'react';\r\nimport '../src/assets/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport Router from './route';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\nfunction App() {\r\n  const [open, setOpen] = useState(false);\r\n  useEffect( async ()=>{\r\n    if (window.ethereum) {\r\n      window.ethereum.on('chainChanged', (chainId) => {\r\n        window.location.reload();\r\n      });\r\n    const chainId = await window.ethereum.request({ method: 'eth_chainId' });\r\n    console.log(chainId);\r\n    if(chainId===\"0x38\")\r\n    setOpen(false);\r\n    else\r\n    setOpen(true);\r\n    }\r\n  }\r\n  )\r\n\r\n  const Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n  });\r\n\r\n  return (\r\n    <div className=\"App\">\r\n    <Dialog\r\n        open={open}\r\n        TransitionComponent={Transition}\r\n        keepMounted\r\n        aria-labelledby=\"alert-dialog-slide-title\"\r\n        aria-describedby=\"alert-dialog-slide-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-slide-title\">{\"chain error\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-slide-description\">\r\n            Please set your chain to smart chain\r\n          </DialogContentText>\r\n        </DialogContent>\r\n      </Dialog>\r\n      <Router />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\workspace\\react\\betting demos\\project\\client\\src\\reportWebVitals.js",[],"D:\\workspace\\react\\betting demos\\project\\client\\src\\store\\configureStore.js",[],"D:\\workspace\\react\\betting demos\\project\\client\\src\\reducers\\cardsReducer.js",[],"D:\\workspace\\react\\betting demos\\project\\client\\src\\route\\index.js",["127"],"import React from 'react';\r\nimport { BrowserRouter ,HashRouter, Route } from 'react-router-dom'\r\nimport Dashboard from '../pages/dashboard';\r\nimport ClassicDice from '../pages/classic_dice';\r\nimport DiceLL from '../pages/dice_ll';\r\nimport Farming from '../pages/farming';\r\nimport Careful from '../pages/careful';\r\nimport Referral from '../pages/referral';\r\nimport Dividend from '../pages/dividend';\r\nimport ReferralDice from '../pages/referral_dice';\r\n\r\n\r\nconst routes = () => (\r\n  <HashRouter>\r\n    <Route exact path=\"/\" component={(Dashboard)} />\r\n    <Route exact path=\"/classic-dice\" component={(ClassicDice)} />\r\n    <Route exact path=\"/dice-ii\" component={(DiceLL)} />\r\n    <Route exact path=\"/dice-ii-2\" component={(Farming)} />\r\n    <Route exact path=\"/be-careful\" component={(Careful)} />\r\n    <Route exact path=\"/referral\" component={(Referral)} />\r\n    <Route exact path=\"/dividend\" component={(Dividend)} />\r\n    <Route exact path=\"/dice/:id\" component={(ReferralDice)} />\r\n  </HashRouter>\r\n)\r\n\r\nexport default routes;\r\n","D:\\workspace\\react\\betting demos\\project\\client\\src\\actions\\actionTypes.js",[],"D:\\workspace\\react\\betting demos\\project\\client\\src\\pages\\farming.js",["128","129","130","131","132","133","134"],"import React from 'react';\r\n// import '../App.css';\r\nimport { Grid, Hidden } from '@material-ui/core';\r\nimport LiveTable from '../components/LiveTable';\r\nimport {Header} from '../components/Header';\r\nimport Footer from '../components/Footer';\r\nimport backgroundImg from '../assets/img/background.png';\r\nimport dice1 from '../assets/img/dice1.png';\r\nimport dice2 from '../assets/img/dice2.png';\r\nimport dice3 from '../assets/img/dice3.png';\r\nimport dice4 from '../assets/img/dice4.png';\r\nimport effect from '../assets/img/effect.png';\r\nimport dicePurple from '../assets/img/dice_purple.png'\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport FarmingCard from '../components/farming_card1';\r\nimport FarmingCard2 from '../components/farming_card2';\r\nimport lampImage from '../assets/img/lamp.png'\r\n\r\nconst ColoredLine = ({ color }) => (\r\n    <hr\r\n        style={{\r\n            color: color,\r\n            backgroundColor: color,\r\n            height: 0.1\r\n        }}\r\n    />\r\n);\r\n\r\nvar rootStyle = {\r\n    width: \"100%\",\r\n    backgroundImage: `url(${backgroundImg})`,\r\n    height: \"100%\",\r\n    backgroundSize: 'cover',\r\n    backgroundPosition: 'center'\r\n};\r\n\r\nconst HigherSlide = withStyles({\r\n    root: {\r\n      color: '#7fc03e',\r\n      height: 20,\r\n    },\r\n    thumb: {\r\n      display: \"none\"\r\n    },\r\n    active: {},\r\n    valueLabel: {\r\n      left: 'calc(-50% + 4px)',\r\n    },\r\n    track: {\r\n        color: \"#ee2748\",\r\n      height: 20,\r\n      borderRadius: 10,\r\n    },\r\n    rail: {\r\n        color: '#7fc03e',\r\n      height: 20,\r\n      borderRadius: 10,\r\n      opacity: 1\r\n    },\r\n  })(Slider);\r\n\r\n  const PayoutSlide = withStyles({\r\n    root: {\r\n      color: '#7fc03e',\r\n      height: 10,\r\n    },\r\n    thumb: {\r\n      display: \"none\"\r\n    },\r\n    active: {},\r\n    valueLabel: {\r\n      left: 'calc(-50% + 4px)',\r\n    },\r\n    track: {\r\n        color: \"#c30a96\",\r\n      height: 10,\r\n    },\r\n    rail: {\r\n        backgroundImage: \"linear-gradient( to right,#316fdc 0%,#3c1c65 100% )\",\r\n      height: 5,\r\n      opacity: 1,\r\n      marginTop: 2.5\r\n    },\r\n  })(Slider);\r\n\r\n\r\nclass ClassicDice extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            higherVal: 50,\r\n            payoutVal: 1.985\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const style1 = {backgroundImage: \"linear-gradient( to right,#14aafc 0%,#4f52ee 100% )\" }\r\n        const style2 = {backgroundImage: \"linear-gradient( to right,#d30c90 0%,#7d02c6 100% )\" }\r\n        const style3 = {backgroundImage: \"linear-gradient( to right,#f2882b 0%,#fb6a49 100% )\" }\r\n        const style4 = {backgroundImage: \"linear-gradient( to right,#33bae4 0%,#d929fb 100% )\" }\r\n        const cardTitle = \"Seriously Risky Farmer\";\r\n        return (\r\n            <div style={rootStyle}>\r\n                <Header></Header>\r\n                <Hidden smDown>\r\n                <Grid container spacing={3} className=\"diceGrid\" justify=\"center\">\r\n                    <Grid item xs={12} sm={8} md={12} >\r\n                        <div className=\"diceTitle\" style={style4}>\r\n                            {cardTitle}\r\n                            <img src={dicePurple} />\r\n                        </div>\r\n                        \r\n                    </Grid>\r\n                </Grid>\r\n                </Hidden>\r\n                \r\n                <Grid container spacing={3} justify=\"center\" className = \"diceGrid\">\r\n                    <Grid container>\r\n                        <Grid item md={6} sm={12} xs={12}>\r\n                            <FarmingCard />\r\n                            <br />\r\n                        </Grid>\r\n                        <Grid item md={6} xs={12} sm={12}>\r\n                            <FarmingCard2 />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                \r\n                <Grid container spacing={3} className=\"autoGrid\" justify=\"center\">\r\n                    <Grid item xs={12} sm={6} md={6}>\r\n                        <button type=\"button\" className=\"playBtn x-buypower-button\">Buy Power</button>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={6}>\r\n                        <button type=\"button\" className=\"playBtn autoBtn\" style={style2}>Get Power by Risk + TT</button>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid container spacing={3} className=\"diceGrid x-farming-blog1\" justify=\"center\">\r\n                    <Grid item xs={12} sm={12} md={12}>\r\n                        <div>\r\n                            <div className = \"text-left\">\r\n                                Geeky Stats\r\n                            </div>\r\n                            <ColoredLine color = \"#692497\" />\r\n                            <div className = \"row\">\r\n                                <div className = \"col-md-4 col-sm-4 col-xs-6 x-font-normal-white winorlose\">APY</div>\r\n                                <div className = \"col-md-8 col-sm-8 col-xs-6 x-risk-balance x-font-normal-white\">191.76<span>%</span></div>\r\n                            </div>\r\n                            <ColoredLine color = \"#692497\" />\r\n                            <div className = \"row\">\r\n                                <div className = \"col-md-4 col-sm-4 col-xs-6 x-font-small-white2 winorlose\">Total value Locked</div>\r\n                                <div className = \"col-md-8 col-sm-8 col-xs-6 x-risk-balance x-font-small-white2\">2,519,658.39597 <span>TT</span></div>\r\n                            </div>\r\n                            <div className = \"row\">\r\n                                <div className = \"col-md-4 col-sm-4 col-xs-6 x-font-small-white2 winorlose\">Emit per Block</div>\r\n                                <div className = \"col-md-8 col-sm-8 col-xs-6 x-risk-balance x-font-small-white2\">0.01 <span>RISK</span></div>\r\n                            </div>\r\n                            <div className = \"row\">\r\n                                <div className = \"col-md-4 col-sm-4 col-xs-6 x-font-small-white2 winorlose\">Network Staked</div>\r\n                                <div className = \"col-md-8 col-sm-8 col-xs-6 x-risk-balance x-font-small-white2\">155,779.663372 <span>POWER</span></div>\r\n                            </div>\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3} className=\"diceGrid\" justify=\"center\">\r\n                    <Grid item xs={12} sm={12} md={12}>\r\n                    <div className = \"x-lamp\"><img src = {lampImage} alt = \"lamp\" /></div>\r\n                    <div className = \"x-lamp x-font-normal-white\" style = {{lineHeight: \"50%\"}}>How to Play</div>                  \r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3} className=\"diceGrid x-farming-blog1\" justify=\"center\">\r\n                    <Grid item xs={12} sm={12} md={12} className = \"text-left x-display-flex\">\r\n                        <div className = \"x-lamp\">\r\n                            <img src = {dicePurple} alt = \"dicepurple\" width='25px' />\r\n                        </div>\r\n                        <div className = \"x-lamp x-font-normal-white2\">\r\n                            Before you begin please read about <span>YIELD FARMING,</span> and inform yourself with as much information regarding <span>YIELD FARMING</span>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={12} className = \"text-left x-display-flex\">\r\n                        <div className = \"x-lamp\">\r\n                            <img src = {dicePurple} alt = \"dicepurple\" width='25px' />\r\n                        </div>\r\n                        <div className = \"x-lamp x-font-normal-white2\">\r\n                            Before you begin please read about <span>YIELD FARMING,</span> and inform yourself with as much information regarding <span>YIELD FARMING</span>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={12} className = \"text-left x-display-flex\">\r\n                        <div className = \"x-lamp\">\r\n                            <img src = {dicePurple} alt = \"dicepurple\" width='25px' />\r\n                        </div>\r\n                        <div className = \"x-lamp x-font-normal-white2\">\r\n                            Before you begin please read about <span>YIELD FARMING,</span> and inform yourself with as much information regarding <span>YIELD FARMING</span>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={12} className = \"text-left x-display-flex\">\r\n                        <div className = \"x-lamp\">\r\n                            <img src = {dicePurple} alt = \"dicepurple\" width='25px' />\r\n                        </div>\r\n                        <div className = \"x-lamp x-font-normal-white2\">\r\n                            Before you begin please read about <span>YIELD FARMING,</span> and inform yourself with as much information regarding <span>YIELD FARMING</span>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={12} className = \"text-left x-display-flex\">\r\n                        <div className = \"x-lamp\">\r\n                            <img src = {dicePurple} alt = \"dicepurple\" width='25px' />\r\n                        </div>\r\n                        <div className = \"x-lamp x-font-normal-white2\">\r\n                            Before you begin please read about <span>YIELD FARMING,</span> and inform yourself with as much information regarding <span>YIELD FARMING</span>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={12} className = \"text-left x-display-flex\">\r\n                        <div className = \"x-lamp\">\r\n                            <img src = {dicePurple} alt = \"dicepurple\" width='25px' />\r\n                        </div>\r\n                        <div className = \"x-lamp x-font-normal-white2\">\r\n                            Before you begin please read about <span>YIELD FARMING,</span> and inform yourself with as much information regarding <span>YIELD FARMING</span>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={12} className = \"text-left x-display-flex\">\r\n                        <div className = \"x-lamp\">\r\n                            <img src = {dicePurple} alt = \"dicepurple\" width='25px' />\r\n                        </div>\r\n                        <div className = \"x-lamp x-font-normal-white2\">\r\n                            Before you begin please read about <span>YIELD FARMING,</span> and inform yourself with as much information regarding <span>YIELD FARMING</span>\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n                <Footer></Footer>\r\n                <img src={dice1} alt=\"dice1\" className=\"homeDice1\"/>\r\n                <img src={dice2} alt=\"dice2\" className=\"homeDice2\"/>\r\n                <img src={dice3} alt=\"dice3\" className=\"homeDice3\"/>\r\n                <img src={dice4} alt=\"dice4\" className=\"homeDice4\"/>\r\n                <img src={effect} alt=\"effect\" className=\"homeEffect\"/>\r\n            </div>\r\n        )\r\n    }\r\n  }\r\n  \r\n// const mapStateToProps = state => {\r\n//     return {\r\n//         items: state,\r\n//     }\r\n// }\r\n\r\n// const mapDispatchToProps = {\r\n//     setItems,\r\n//     updateTimer\r\n// }\r\n  \r\nexport default ClassicDice;\r\n","D:\\workspace\\react\\betting demos\\project\\client\\src\\pages\\dividend.js",[],"D:\\workspace\\react\\betting demos\\project\\client\\src\\pages\\referral.js",["135","136","137","138","139","140"],"import React from 'react';\r\nimport { Grid, Hidden } from '@material-ui/core';\r\nimport LiveTable from '../components/LiveTable';\r\nimport {Header, socket} from '../components/Header';\r\nimport Footer from '../components/Footer';\r\nimport backgroundImg from '../assets/img/background.png';\r\nimport dice1 from '../assets/img/dice1.png';\r\nimport dice2 from '../assets/img/dice2.png';\r\nimport dice3 from '../assets/img/dice3.png';\r\nimport dice4 from '../assets/img/dice4.png';\r\nimport effect from '../assets/img/effect.png';\r\nimport dicePink from '../assets/img/dice_pink.png'\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport referalHuman from '../assets/img/referral_human.png';\r\nimport ReferralCard from '../components/referal_card';\r\nimport lampImage from '../assets/img/lamp.png';\r\nimport ReferralTable from '../components/referral_table';\r\nimport Axios from 'axios';\r\n\r\nimport Web3 from 'web3';\r\nimport Abi from '../assets/abi/abi.json';\r\n\r\nconst EthereumTx = require('ethereumjs-tx');\r\n\r\nvar web3 = new Web3();\r\n  var tokenAddress = \"0xf76e1b7ff23b462bf9f0562dcf7929c032c84ffb\";\r\n  var myContract = new web3.eth.Contract(Abi, tokenAddress);\r\n  var gasLimitHex = web3.utils.toHex(90000);\r\n\r\n\r\nconst ColoredLine = ({ color }) => (\r\n    <hr\r\n        style={{\r\n            color: color,\r\n            backgroundColor: color,\r\n            height: 0.1\r\n        }}\r\n    />\r\n);\r\n\r\nvar rootStyle = {\r\n    width: \"100%\",\r\n    backgroundImage: `url(${backgroundImg})`,\r\n    height: \"100%\",\r\n    backgroundSize: 'cover',\r\n    backgroundPosition: 'center'\r\n};\r\n\r\nconst HigherSlide = withStyles({\r\n    root: {\r\n      color: '#7fc03e',\r\n      height: 20,\r\n    },\r\n    thumb: {\r\n      display: \"none\"\r\n    },\r\n    active: {},\r\n    valueLabel: {\r\n      left: 'calc(-50% + 4px)',\r\n    },\r\n    track: {\r\n        color: \"#ee2748\",\r\n      height: 20,\r\n      borderRadius: 10,\r\n    },\r\n    rail: {\r\n        color: '#7fc03e',\r\n      height: 20,\r\n      borderRadius: 10,\r\n      opacity: 1\r\n    },\r\n  })(Slider);\r\n\r\n  const PayoutSlide = withStyles({\r\n    root: {\r\n      color: '#7fc03e',\r\n      height: 10,\r\n    },\r\n    thumb: {\r\n      display: \"none\"\r\n    },\r\n    active: {},\r\n    valueLabel: {\r\n      left: 'calc(-50% + 4px)',\r\n    },\r\n    track: {\r\n        color: \"#c30a96\",\r\n      height: 10,\r\n    },\r\n    rail: {\r\n        backgroundImage: \"linear-gradient( to right,#316fdc 0%,#3c1c65 100% )\",\r\n      height: 5,\r\n      opacity: 1,\r\n      marginTop: 2.5\r\n    },\r\n  })(Slider);\r\n\r\n\r\nclass ClassicDice extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            higherVal: 50,\r\n            payoutVal: 1.985,\r\n            publicKey: '',\r\n            widthFlag: false,\r\n            ReferralAmount: 0\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(window.ethereum){\r\n            this.setState({publicKey: window.ethereum.selectedAddress})\r\n        }\r\n        if(window.innerWidth<=600){\r\n            this.setState({widthFlag: true})\r\n        }\r\n\r\n        Axios({\r\n            method: \"POST\",\r\n            url: \"http://localhost:5000/api/referral/get-referral-amount\",\r\n            data: {\r\n                publicKey: window.ethereum.selectedAddress\r\n            }\r\n        }).then((res)=>{\r\n            console.log(res.data);\r\n            try{\r\n            if(res.data.amount)\r\n            this.setState({ReferralAmount: res.data.amount})\r\n            else\r\n            this.setState({ReferralAmount: 0})\r\n            }\r\n            catch(error){\r\n                console.log(error)\r\n            }\r\n        })\r\n\r\n        // Axios({\r\n        //     method: \"POST\",\r\n        //     url: \"http://localhost:5000/api/referral/get-bid-history\",\r\n        //     data: {\r\n        //         publicKey: window.ethereum.selectedAddress\r\n        //     }\r\n        // }).then((res)=>{\r\n        //     console.log(res.data);\r\n        //     try{\r\n        //         if(res.data.amount)\r\n        //             this.setState({ReferralAmount: res.data.amount})\r\n        //         else this.setState({ReferralAmount: 0})\r\n        //     }\r\n        //     catch(error){\r\n        //         console.log(error)\r\n        //     }\r\n        // })\r\n\r\n    }\r\n\r\n    withdraw = async () =>{\r\n        if(this.state.ReferralAmount){\r\n        if (window.ethereum) {\r\n            const adminPrivateKey = \"0x2e16e7f903f4ff5a1518c5549d7ccfa5235ea4555c7e75c56a71c2dae9811cde\";\r\n            const adminPublicKey = \"0x413EBD57EbA0f200ed592c31E7dB6119C92A7973\";\r\n            var web3 = new Web3(new Web3.providers.HttpProvider(\"https://bsc-dataseed.binance.org/\"));\r\n            \r\n            var amount = this.state.ReferralAmount;\r\n    \r\n    // transaction\r\n            let data =await myContract.methods.transfer(window.ethereum.selectedAddress, web3.utils.toHex(web3.utils.toWei(amount.toString()))).encodeABI();\r\n\r\n            // transection\r\n            web3.eth.getTransactionCount(adminPublicKey).then(function (lastCountOfTransaction) {\r\n            console.log(data);\r\n            var txdetail = {\r\n                \"nonce\":'0x' + lastCountOfTransaction.toString(16),\r\n                \"to\": tokenAddress,\r\n                \"value\": web3.utils.toHex(web3.utils.toWei(\"0\")),\r\n                \"gas\": gasLimitHex,\r\n                \"gasPrice\": web3.utils.toHex(web3.utils.toWei('10', 'gwei')),\r\n                \"data\":data\r\n            }\r\n\r\n            const privateKey1Buffer = new Buffer.from(adminPrivateKey.slice(2), 'hex')\r\n\r\n            console.log(\"privateKey1Buffer : \", privateKey1Buffer);\r\n            const transaction = new EthereumTx(txdetail);\r\n            transaction.sign(privateKey1Buffer);\r\n            const serializedTransaction = transaction.serialize();\r\n            \r\n            console.log(\"serializedTransaction : \", serializedTransaction);\r\n            try {\r\n                web3.eth.sendSignedTransaction('0x' + serializedTransaction.toString('hex'))\r\n                .on('confirmation', (res) => {\r\n                     Axios({\r\n                         method: \"POST\",\r\n                         url: \"http://localhost:5000/api/referral/withdraw\",\r\n                         data: {\r\n                             publicKey: window.ethereum.selectedAddress\r\n                         }\r\n                     }).then((res)=>{\r\n                        window.location.reload(); \r\n                     })\r\n                    });\r\n            }\r\n            catch (e) {\r\n                console.log(\"sendSignedTransaction error : \", e);\r\n            }\r\n            });\r\n               \r\n        }\r\n    }\r\n    }\r\n\r\n    handleCopyLink = ()=>{\r\n        navigator.clipboard.writeText(`https://playdice.xyz/#/dice/${this.state.publicKey}`);\r\n      }\r\n\r\n    render() {\r\n        const style3 = {backgroundImage: \"linear-gradient( to right,#f67d78 0%,#bf3d63 100% )\" }\r\n        const style2 = {backgroundImage: \"linear-gradient( to right,#d30c90 0%,#7d02c6 100% )\" }\r\n        const cardTitle = \"Referral!\";\r\n        return (\r\n            <div style={rootStyle}>\r\n                <Header></Header>\r\n                <Hidden smDown>\r\n                <Grid container spacing={3} className=\"diceGrid\" justify=\"center\">\r\n                    <Grid item xs={12} sm={8} md={12} >\r\n                        <div className=\"diceTitle\" style={style3}>\r\n                            {cardTitle}\r\n                        </div>\r\n                        \r\n                    </Grid>\r\n                </Grid>\r\n                </Hidden>\r\n                <div>\r\n                    <img src = {referalHuman} alt = \"referral_human\" />\r\n                </div>\r\n                <Grid container spacing = {3} className = \"diceGrid\" justify='center'>\r\n                    <Grid item xs={12} sm = {6} md = {6}>\r\n                        <ReferralCard\r\n                            title = \"Earn\" \r\n                            betTitle = \"From Ref's Bets\"\r\n                            betValue = \"0.1%\"\r\n                            miningTitle = \"From Ref's mining\"\r\n                            miningValue = \"5%\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm = {6} md = {6}>\r\n                        <ReferralCard \r\n                            title = \"My Referrals\" \r\n                            betTitle = \"Count\"\r\n                            betValue = \"0\"\r\n                            miningTitle = \"Profit From Ref Bets\"\r\n                            miningValue = {this.state.ReferralAmount}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <div className = \"x-nopadding-diceGrid text-right\">\r\n                    <button className = \"x-referral-withdraw-button\" style = {style2} onClick = {this.withdraw}>Withdraw</button>\r\n                </div>\r\n                <div className = \"x-referal-link-title diceGrid\">\r\n                    <div className = \"mb-2\">\r\n                        Your referal link\r\n                    </div>\r\n                    <div className  = \"x-referal-link\">\r\n                        <span className = \"float-left\">{!this.state.widthFlag?`https://playdice.xyz/#/dice/${this.state.publicKey}`:`https://playdice.xyz/#/...`}</span>\r\n                        <button className = \"x-referal-link-copy-btn float-right\" onClick = {this.handleCopyLink}>Copy</button>\r\n                    </div>\r\n                </div>\r\n                <Grid container spacing={3} className=\"diceGrid\" justify=\"center\">\r\n                    <Grid item xs={12} sm={12} md={12}>\r\n                    <div className = \"x-lamp\"><img src = {lampImage} alt = \"lamp\" /></div>\r\n                    <div className = \"x-lamp x-font-normal-white\" style = {{lineHeight: \"50%\"}}>How to Play</div>                  \r\n                    </Grid>\r\n                </Grid>\r\n                <div container spacing={3} className=\"diceGrid x-farming-blog1\" justify=\"center\">\r\n                    <Grid item xs={12} sm={12} md={12} className = \"text-left x-display-flex\">\r\n                        <div className = \"x-lamp\">\r\n                            <img src = {dicePink} alt = \"dicepink\" width='25px' />\r\n                        </div>\r\n                        <div className = \"x-lamp x-font-normal-white2\">\r\n                            Share your referral links\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={12} className = \"text-left x-display-flex\">\r\n                        <div className = \"x-lamp\">\r\n                            <img src = {dicePink} alt = \"dicepink\" width='25px' />\r\n                        </div>\r\n                        <div className = \"x-lamp x-font-normal-white2\">\r\n                            Recieve a lifetime reward of 0.1% SLSH from each bet made by your ref!\r\n                        </div>\r\n                    </Grid>\r\n                </div>\r\n\r\n                <Grid container spacing = {3} className = 'diceGrid' justify = \"center\">\r\n                    <Grid item xs = {12} sm = {12} md = {12}>\r\n                        <ReferralTable />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Footer></Footer>\r\n                <img src={dice1} alt=\"dice1\" className=\"homeDice1\"/>\r\n                <img src={dice2} alt=\"dice2\" className=\"homeDice2\"/>\r\n                <img src={dice3} alt=\"dice3\" className=\"homeDice3\"/>\r\n                <img src={dice4} alt=\"dice4\" className=\"homeDice4\"/>\r\n                <img src={effect} alt=\"effect\" className=\"homeEffect\"/>\r\n            </div>\r\n        )\r\n    }\r\n  }\r\n  \r\n// const mapStateToProps = state => {\r\n//     return {\r\n//         items: state,\r\n//     }\r\n// }\r\n\r\n// const mapDispatchToProps = {\r\n//     setItems,\r\n//     updateTimer\r\n// }\r\n  \r\nexport default ClassicDice;\r\n","D:\\workspace\\react\\betting demos\\project\\client\\src\\pages\\dashboard.js",["141","142","143","144"],"import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport Card from '../components/Card';\r\nimport LiveTable from '../components/LiveTable';\r\nimport {Header, socket} from '../components/Header';\r\nimport Footer from '../components/Footer';\r\nimport backgroundImg from '../assets/img/background.png';\r\nimport title from '../assets/img/title.png';\r\nimport diceBlue from '../assets/img/dice_blue.png'\r\nimport dicePink from '../assets/img/dice_pink.png'\r\nimport diceYellow from '../assets/img/dice_yellow.png'\r\nimport dicePurple from '../assets/img/dice_purple.png'\r\nimport dice1 from '../assets/img/dice1.png';\r\nimport dice2 from '../assets/img/dice2.png';\r\nimport dice3 from '../assets/img/dice3.png';\r\nimport dice4 from '../assets/img/dice4.png';\r\nimport effect from '../assets/img/effect.png';\r\n\r\nvar rootStyle = {\r\n    width: \"100%\",\r\n    backgroundImage: `url(${backgroundImg})`,\r\n    height: \"100%\",\r\n    backgroundSize: 'cover',\r\n    backgroundPosition: 'center'\r\n};\r\n\r\nfunction createData(id, player, bet, profit, payout, guess, roll) {\r\n    return { id, player, bet, profit, payout, guess, roll };\r\n  }\r\n\r\nconst rows = [\r\n    \r\n  ];\r\n\r\n  const myRows = [\r\n    // createData(1, 'Yark G', 50, \"+79.13%\", 37.41, \"eg.text\", \"eg.text\"),\r\n    // createData(2, 'Action', 52, \"+79.13%\", 37.41, \"eg.text\", \"eg.text\")\r\n  ];\r\n\r\nclass Dashboard extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            stateMyData: [],\r\n            tableViewFlag: false,\r\n            totalData: [],\r\n            stateData: []\r\n        }\r\n    }\r\n\r\n    submitCard = (title) => {\r\n        console.log(title)\r\n    }\r\n\r\n    getData = foodItems => {\r\n        console.log(foodItems);\r\n        foodItems = foodItems.map(food => {\r\n          food.order = 0;\r\n          return food;\r\n        });\r\n        this.setState({ food_data: foodItems });\r\n      };\r\n      componentDidMount(){\r\n        socket.on(\"users_count\", (data)=>{\r\n            console.log(data);\r\n            this.setState({totalData: data});\r\n            rows.push(createData(1, this.state.totalData.publicKey, this.state.totalData.amount, this.state.totalData.profit, this.state.totalData.payoutVal, this.state.totalData.higherVal, this.state.totalData.roll))\r\n            this.setState({stateData:rows});\r\n            if(data.publicKey === window.ethereum.selectedAddress){\r\n                myRows.push(createData(1, data.publicKey, data.amount, data.profit, data.payoutVal, data.higherVal, data.roll));\r\n                this.setState({stateMyData:myRows});\r\n            }\r\n        })\r\n    }\r\n\r\n      handleAllPlayer = () =>{\r\n        this.setState({tableViewFlag: false})\r\n      }\r\n    \r\n      handleMyBets = () =>{\r\n        this.setState({tableViewFlag: true})\r\n      }\r\n\r\n    render() {\r\n        const style1 = {backgroundImage: \"linear-gradient( to right,#14aafc 0%,#4f52ee 100% )\" }\r\n        const style2 = {backgroundImage: \"linear-gradient( to right,#d30c90 0%,#7d02c6 100% )\" }\r\n        const style3 = {backgroundImage: \"linear-gradient( to right,#f2882b 0%,#fb6a49 100% )\" }\r\n        const style4 = {backgroundImage: \"linear-gradient( to right,#33bae4 0%,#d929fb 100% )\" }\r\n        return (\r\n            <div>\r\n            <div className = \"dashboard\" style={rootStyle}>\r\n                <Header></Header>\r\n                <Grid container spacing={3} className=\"dashboardGrid\" justify=\"center\">\r\n                    <Grid item xs={12} sm={12} md={8} >\r\n                        <img src={title} alt=\"title\" width=\"100%\"/>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={6}>\r\n                        <Card \r\n                            cardTitle=\"Dice I\" \r\n                            bodyTitle=\"10,000 Side Dice (0 - 9,999)\"\r\n                            bodyComment=\"with a very large winning ratio (up to 49.625x) Play, invest in the bankroll, win the Jackpot, repeat!\"\r\n                            btnTitle='Play \"Dice I\"'\r\n                            cHeaderStyle={style1}\r\n                            diceImg={diceBlue}\r\n                            gameParams = 'classic-dice'\r\n                            onSubmit={this.submitCard}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={6}>\r\n                        <Card \r\n                            cardTitle=\"Dice II\" \r\n                            bodyTitle=\"100 Side Dice (0 - 99)\"\r\n                            bodyComment=\"with a very large winning ratio (up to 49.625x) Play, invest in the bankroll, win the Jackpot, repeat!\"\r\n                            btnTitle='Play \"Dice II\"'\r\n                            cHeaderStyle={style2}\r\n                            diceImg={dicePink}\r\n                            gameParams = 'dice-ii'\r\n                            onSubmit={this.submitCard}\r\n                        />\r\n                    </Grid>\r\n                    {/* <Grid item xs={12} sm={12} md={6}>\r\n                        <Card \r\n                            cardTitle=\"Careful\" \r\n                            bodyTitle=\" \"\r\n                            bodyComment=\"a ZERO SUM and a very HIGH RISK gamewith a potential earningof 400% join the game, buy the ticket, earn CARE Token\"\r\n                            btnTitle='Play \"Be Careful\"'\r\n                            cHeaderStyle={style3}\r\n                            diceImg={diceYellow}\r\n                            gameParams = 'be-careful'\r\n                            onSubmit={this.submitCard}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={6}>\r\n                        <Card \r\n                            cardTitle=\"Farming!\" \r\n                            bodyTitle=\" \"\r\n                            bodyComment=\"We Seriously jump into Farming, resting from dice with the soothing breeze from the greens get POWER, earns RISK!\"\r\n                            btnTitle='Play \"Dice II\"'\r\n                            cHeaderStyle={style4} \r\n                            diceImg={dicePurple}\r\n                            gameParams = 'dice-ii-2'\r\n                            onSubmit={this.submitCard}\r\n                        />\r\n                    </Grid> */}\r\n                    \r\n                </Grid>\r\n                <img src={dice1} alt=\"dice1\" className=\"homeDice1\"/>\r\n                <img src={dice2} alt=\"dice2\" className=\"homeDice2\"/>\r\n                <img src={dice3} alt=\"dice3\" className=\"homeDice3\"/>\r\n                <img src={dice4} alt=\"dice4\" className=\"homeDice4\"/>\r\n                <img src={effect} alt=\"effect\" className=\"homeEffect\"/>\r\n            </div>\r\n            <div style = {{backgroundColor: \"#76006c\"}}>\r\n                <Grid container spacing={3} className=\"diceGridTable\" justify=\"center\">\r\n                    <Grid item xs={12} sm={12} md={12} className=\"tableButtons\">\r\n                        <p>Live Player Bets</p>\r\n                        <div className=\"tableBtns\">\r\n                            <button className=\"allPlayers\" onClick = {this.handleAllPlayer}>All Players</button>\r\n                            <button className=\"allPlayers\" onClick = {this.handleMyBets}>My bets</button>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={12}>\r\n                        <LiveTable rows = {!this.state.tableViewFlag?this.state.stateData:this.state.stateMyData} />\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n            <Footer></Footer>\r\n            </div>\r\n        )\r\n    }\r\n  }\r\n  \r\n// const mapStateToProps = state => {\r\n//     return {\r\n//         items: state,\r\n//     }\r\n// }\r\n\r\n// const mapDispatchToProps = {\r\n//     setItems,\r\n//     updateTimer\r\n// }\r\n  \r\nexport default Dashboard;\r\n","D:\\workspace\\react\\betting demos\\project\\client\\src\\pages\\classic_dice.js",["145","146","147","148","149","150","151","152","153","154","155","156"],"import React from 'react';\r\n// import '../App.css';\r\nimport { Grid } from '@material-ui/core';\r\nimport LiveTable from '../components/LiveTable';\r\nimport {Header, socket} from '../components/Header';\r\nimport Footer from '../components/Footer';\r\nimport backgroundImg from '../assets/img/background.png';\r\nimport dice1 from '../assets/img/dice1.png';\r\nimport dice2 from '../assets/img/dice2.png';\r\nimport dice3 from '../assets/img/dice3.png';\r\nimport dice4 from '../assets/img/dice4.png';\r\nimport effect from '../assets/img/effect.png';\r\nimport diceBlue from '../assets/img/dice_blue.png'\r\nimport dicePink from '../assets/img/dice_pink.png'\r\nimport diceYellow from '../assets/img/dice_yellow.png'\r\nimport dicePurple from '../assets/img/dice_purple.png'\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport { wait } from '@testing-library/react';\r\nimport Web3 from 'web3';\r\nimport Abi from '../assets/abi/abi.json';\r\n\r\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\nvar web3 = new Web3();\r\n  var tokenAddress = \"0xf76e1b7ff23b462bf9f0562dcf7929c032c84ffb\";\r\n  var myContract = new web3.eth.Contract(Abi, tokenAddress);\r\n  var gasLimitHex = web3.utils.toHex(90000);\r\n\r\nvar rootStyle = {\r\n    width: \"100%\",\r\n    backgroundImage: `url(${backgroundImg})`,\r\n    height: \"100%\",\r\n    backgroundSize: 'cover',\r\n    backgroundPosition: 'center'\r\n};\r\n\r\nconst HigherSlide = withStyles({\r\n    root: {\r\n      color: '#7fc03e',\r\n      height: 20,\r\n    },\r\n    thumb: {\r\n      display: \"none\"\r\n    },\r\n    active: {},\r\n    valueLabel: {\r\n      left: 'calc(-50% + 4px)',\r\n    },\r\n    track: {\r\n        color: \"#ee2748\",\r\n      height: 20,\r\n      borderRadius: 10,\r\n    },\r\n    rail: {\r\n        color: '#7fc03e',\r\n      height: 20,\r\n      borderRadius: 10,\r\n      opacity: 1\r\n    },\r\n  })(Slider);\r\n\r\n  const PayoutSlide = withStyles({\r\n    root: {\r\n      color: '#7fc03e',\r\n      height: 10,\r\n    },\r\n    thumb: {\r\n      display: \"none\"\r\n    },\r\n    active: {},\r\n    valueLabel: {\r\n      left: 'calc(-50% + 4px)',\r\n    },\r\n    track: {\r\n        color: \"#c30a96\",\r\n      height: 10,\r\n    },\r\n    rail: {\r\n        backgroundImage: \"linear-gradient( to right,#316fdc 0%,#3c1c65 100% )\",\r\n      height: 5,\r\n      opacity: 1,\r\n      marginTop: 2.5\r\n    },\r\n  })(Slider);\r\n\r\n  function timeout(delay: number) {\r\n    return new Promise( res => setTimeout(res, delay) );\r\n}\r\n\r\nfunction createData(id, player, bet, profit, payout, guess, roll) {\r\n    return { id, player, bet, profit, payout, guess, roll };\r\n  }\r\n\r\nconst rows = [\r\n    // createData(1, 'Yark G', 50, \"+79.13%\", 37.41, \"eg.text\", \"eg.text\"),\r\n    // createData(2, 'Action', 52, \"+79.13%\", 37.41, \"eg.text\", \"eg.text\")\r\n  ];\r\n\r\n  const myRows = [\r\n    // createData(1, 'Yark G', 50, \"+79.13%\", 37.41, \"eg.text\", \"eg.text\"),\r\n    // createData(2, 'Action', 52, \"+79.13%\", 37.41, \"eg.text\", \"eg.text\")\r\n  ];\r\n\r\n  var i=1;\r\n  var k=0;\r\nclass DiceLL extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.handleHigher = this.handleHigher.bind(this);\r\n        this.handlePayout = this.handlePayout.bind(this);\r\n        this.handleHigherVal = this.handleHigherVal.bind(this);\r\n        this.handlePayoutVal = this.handlePayoutVal.bind(this);\r\n\r\n        this.publicKey = React.createRef();\r\n\r\n        this.state = {\r\n            flag:true,\r\n            amount: 1,\r\n            higherVal: 5000,\r\n            payoutVal: 9910/5000,\r\n            profit: 9910/5000,\r\n            result: 0,\r\n            totalData: [],\r\n            stateData: [],\r\n            stopOnLoss: 10,\r\n            stopOnProfit: 10,\r\n            autoFlag: false,\r\n            totalProfit: 0,\r\n            stateMyData: [],\r\n            tableViewFlag: false\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        socket.on(\"users_count\", (data)=>{\r\n            console.log(data);\r\n            this.setState({totalData: data});\r\n            rows.push(createData(1, this.state.totalData.publicKey, this.state.totalData.amount, this.state.totalData.profit, this.state.totalData.payoutVal, this.state.totalData.higherVal, this.state.totalData.roll))\r\n            this.setState({stateData:rows});\r\n            if(data.publicKey === window.ethereum.selectedAddress){\r\n                myRows.push(createData(1, data.publicKey, data.amount, data.profit, data.payoutVal, data.higherVal, data.roll));\r\n                this.setState({stateMyData:myRows});\r\n            }\r\n        })\r\n    }\r\n    \r\n\r\n    handleHigherVal = (event) => {\r\n        this.setState({higherVal: event.target.value});\r\n        this.setState({payoutVal: 9910/(10000-event.target.value)})\r\n        this.setState({profit: (9910/(10000-event.target.value))*this.state.amount})\r\n    }\r\n\r\n    handleHigher = (event, value) => {\r\n        this.setState({higherVal: value});\r\n        this.setState({payoutVal: 9910/(10000-value)});\r\n        this.setState({profit: this.state.amount*(9910/(10000-value))})\r\n    }\r\n\r\n    handlePayoutVal = (event) => {\r\n        \r\n    }\r\n\r\n    handlePayout = (event, value) => {\r\n        this.setState({payoutVal: value});\r\n    }\r\n\r\n    handleAmount = (event) => {\r\n        this.setState({amount: event.target.value});\r\n        this.setState({profit: (9910/(10000-this.state.higherVal))*event.target.value})\r\n    }\r\n\r\n    amountDivision = (event) =>{\r\n        var tempAmount = this.state.amount/2;\r\n        this.setState({amount: this.state.amount/2});\r\n        this.setState({profit: this.state.payoutVal*tempAmount})\r\n    }\r\n    amountDouble = (event) =>{\r\n        var tempAmount = this.state.amount*2;\r\n        this.setState({amount: this.state.amount*2});\r\n        this.setState({profit: this.state.payoutVal*tempAmount})\r\n    }\r\n    minHigher = () =>{\r\n        this.setState({higherVal: 100});\r\n        this.setState({payoutVal: 99.1})\r\n        this.setState({profit: this.state.amount*99.1})\r\n    }\r\n    maxHigher = () =>{\r\n        this.setState({higherVal: 9910});\r\n        this.setState({payoutVal: 1})\r\n        this.setState({profit: this.state.amount*1})\r\n    }\r\n\r\n    handleOnLoss = (e) =>{\r\n        this.setState({stopOnLoss:e.target.value})\r\n    }\r\n    handleOnProfit = (e) =>{\r\n        this.setState({stopOnProfit: e.target.value})\r\n    }\r\n\r\n    onBet = async () =>{\r\n        if (window.ethereum) {\r\n            var web3 = new Web3(new Web3.providers.HttpProvider(\"https://bsc-dataseed.binance.org/\"));\r\n            //console.log(web3.givenProvider.selectedAddress);\r\n            console.log(window.ethereum._metamask.isUnlocked());\r\n            let data = myContract.methods.transfer(\"0x413EBD57EbA0f200ed592c31E7dB6119C92A7973\", web3.utils.toHex(web3.utils.toWei(this.state.amount.toString()))).encodeABI();\r\n\r\n            const chainId = await window.ethereum.request({ method: 'eth_chainId' });\r\n            var txdetail = {\r\n                from: window.ethereum.selectedAddress,\r\n                to: tokenAddress,\r\n                value: web3.utils.toHex(web3.utils.toWei(\"0\")),\r\n                gas: gasLimitHex,\r\n                gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei')),\r\n                chainId:chainId,\r\n                data:data\r\n              }\r\n              window.ethereum.request({ method: 'eth_sendTransaction', params: [txdetail] }).then( async (res) => {\r\n                console.log('res ',res);\r\n\r\n\r\n            console.log(txdetail);\r\n        i++;\r\n        let randomNumber\r\n        for(var j=0; j<=15; j++){\r\n            await timeout(100);\r\n            randomNumber = Math.floor(Math.random() * 10000);\r\n            this.setState({result: randomNumber});\r\n        }\r\n        console.log(this.publicKey.current.state.publicKey);\r\n        if(randomNumber>=this.state.higherVal){\r\n            var winnerData = {\r\n                \"publicKey\": window.ethereum.selectedAddress,\r\n                \"amount\": this.state.amount,\r\n                \"profit\": this.state.profit,\r\n                \"payoutVal\": this.state.payoutVal,\r\n                \"higherVal\": this.state.higherVal,\r\n                \"roll\": randomNumber\r\n            }\r\n\r\n                socket.emit(\"set winner\", winnerData)\r\n\r\n        }\r\n        else{\r\n\r\n                var loserData = {\r\n                    \"publicKey\": window.ethereum.selectedAddress,\r\n                    \"amount\": this.state.amount,\r\n                    \"profit\": 0,\r\n                    \"payoutVal\": this.state.payoutVal,\r\n                    \"higherVal\": this.state.higherVal,\r\n                    \"roll\": randomNumber\r\n                }\r\n    \r\n                    socket.emit(\"set loser\", loserData)\r\n        }\r\n    });\r\n    }\r\n}\r\n\r\nhandleAutoBet = async () =>{\r\n    this.setState({autoFlag: !this.state.autoFlag});\r\n    await delay(500);\r\n    if(this.state.autoFlag){\r\n    if (window.ethereum) {\r\n        var web3 = new Web3(new Web3.providers.HttpProvider(\"https://bsc-dataseed.binance.org/\"));\r\n            //console.log(web3.givenProvider.selectedAddress);\r\n            console.log(window.ethereum._metamask.isUnlocked());\r\n            let data = myContract.methods.transfer(\"0x413EBD57EbA0f200ed592c31E7dB6119C92A7973\", web3.utils.toHex(web3.utils.toWei(this.state.stopOnLoss.toString()))).encodeABI();\r\n\r\n            const chainId = await window.ethereum.request({ method: 'eth_chainId' });\r\n            var txdetail = {\r\n                //\"nonce\":'0x' + lastCountOfTransaction.toString(16),\r\n              // nonce: '0x00',\r\n                from: window.ethereum.selectedAddress,\r\n                to: tokenAddress,\r\n                value: web3.utils.toHex(web3.utils.toWei(\"0\")),\r\n                gas: gasLimitHex,\r\n                gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei')),\r\n                chainId:chainId,\r\n                data:data\r\n              }\r\n              window.ethereum.request({ method: 'eth_sendTransaction', params: [txdetail] }).then( async (res) => {\r\n                console.log('res ',res);\r\n                console.log(txdetail);\r\n                let randomNumber;\r\n                console.log(this.state.autoFlag)\r\n                    while(this.state.totalProfit>=-1*this.state.stopOnLoss+this.state.amount&&this.state.totalProfit<=this.state.stopOnProfit-this.state.profit&&this.state.autoFlag){\r\n                        randomNumber = Math.floor(Math.random() * 10000);\r\n                        console.log(randomNumber)\r\n                        await delay(100);\r\n                        if(randomNumber>=this.state.higherVal){\r\n                            // this.state.totalProfit+=this.state.profit-this.state.amount;\r\n                            this.setState({totalProfit:this.state.totalProfit+this.state.profit-this.state.amount})\r\n                        }\r\n                        else{\r\n                            // this.state.totalProfit-=this.state.amount;\r\n                            this.setState({totalProfit:this.state.totalProfit-this.state.amount})\r\n                        }\r\n                    }\r\n                    var autoData = {\r\n                        \"publicKey\": window.ethereum.selectedAddress,\r\n                        \"amount\": this.state.stopOnLoss,\r\n                        \"profit\": this.state.totalProfit,\r\n                        \"payoutVal\": this.state.payoutVal,\r\n                        \"higherVal\": this.state.higherVal,\r\n                        \"roll\": \"autoBet\"\r\n                    }\r\n                    socket.emit(\"set autoBet\", autoData);\r\n                    console.log(\"wowow\",this.state.totalProfit)\r\n                    this.setState({autoFlag: false})\r\n                })\r\n    }\r\n}\r\n}\r\n\r\nhandleAllPlayer = () =>{\r\n    this.setState({tableViewFlag: false})\r\n  }\r\n\r\n  handleMyBets = () =>{\r\n    this.setState({tableViewFlag: true})\r\n  }\r\n\r\n\r\n    render() {\r\n        const style1 = {backgroundImage: \"linear-gradient( to right,#14aafc 0%,#4f52ee 100% )\" }\r\n        const style2 = {backgroundImage: \"linear-gradient( to right,#d30c90 0%,#7d02c6 100% )\" }\r\n        const style3 = {backgroundImage: \"linear-gradient( to right,#f2882b 0%,#fb6a49 100% )\" }\r\n        const style4 = {backgroundImage: \"linear-gradient( to right,#33bae4 0%,#d929fb 100% )\" }\r\n        const cardTitle = \"Dice I\";\r\n        return (\r\n            <div>\r\n                <div className=\"dashboard\" style={rootStyle}>\r\n                    <Header ref = {this.publicKey} />\r\n                    <Grid container spacing={3} className=\"diceGrid\" justify=\"center\">\r\n                        <Grid item xs={12} sm={12} md={12} >\r\n                            <div className=\"diceTitle\" style={style1}>\r\n                                {cardTitle}\r\n                                <img src={diceBlue} />\r\n                            </div>\r\n                            \r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container spacing={3} className=\"diceGrid\" justify=\"center\">\r\n                        <Grid item xs={12} sm={6} md={3} className=\"diceInfo\">\r\n                            <p>Bet Amount</p>\r\n                            <input type=\"text\" className=\"infoCard\" value = {this.state.amount} onChange = {this.handleAmount} />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6} md={3} className=\"diceInfo\">\r\n                            <p>Higher (>=)</p>\r\n                            <input className=\"infoCard\" value={this.state.higherVal} onChange={this.handleHigherVal} min = \"1\" max = \"10000\"/>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6} md={3} className=\"diceInfo\">\r\n                            <p>Payout (x)</p>\r\n                            <input className=\"infoCard\" value={this.state.payoutVal.toFixed(3)} onChange={this.handlePayoutVal} />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6} md={3} className=\"diceInfo\">\r\n                            <p>Profit (SLSH)</p>\r\n                            <input className=\"infoCard\" value={this.state.profit.toFixed(3)} />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6} md={3} className=\"diceBtn1\">\r\n                            <button onClick = {this.amountDivision}>1/2</button>\r\n                            <button onClick = {this.amountDouble}>2x</button>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6} md={3} className=\"diceBtn1\">\r\n                            <button onClick = {this.minHigher}>Min</button>\r\n                            <button onClick = {this.maxHigher}>Max</button>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6} md={6} className=\"diceBtn3\">\r\n                            <button onClick = {this.onBet}>BET</button>\r\n                        </Grid>\r\n                    </Grid>\r\n                    \r\n                    <Grid container spacing={3} className=\"diceGrid levelGrid\" justify=\"center\">\r\n                        <Grid container>\r\n                            <Grid item md={3} sm={3} xs={3} className=\"lower\">\r\n                                LOWER\r\n                            </Grid>\r\n                            <Grid item md={9} xs={9} sm={9}className=\"higher\">\r\n                                HIGHER\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12} sm={12} >\r\n                                <PayoutSlide valueLabelDisplay=\"auto\" aria-label=\"pretto slider\" value={this.state.higherVal, this.state.higherVal} onChange={this.handleHigher} min={0} max={10000} step={1}/>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <HigherSlide valueLabelDisplay=\"auto\" aria-label=\"pretto slider\" value={this.state.result, this.state.result} min={0} max={10000}/>\r\n                        <p className=\"progressTitle\">{`Result : ${this.state.result} >= ${this.state.higherVal}`}</p>\r\n                    </Grid>\r\n                    \r\n                    <Grid container spacing={3} className=\"autoGrid\" justify=\"center\">\r\n                        <Grid item xs={12} sm={12} md={12}>\r\n                            <button type=\"button\" className=\"playBtn autoBtn\" style={style2}>Go to Automatic Bets</button>\r\n                        </Grid>\r\n                    </Grid>\r\n                    \r\n                    <Grid container spacing={3} className=\"diceGrid-table-top resultGrid\" justify=\"center\">\r\n                        <Grid item md={9} sm={12} xs={12} >\r\n                            <Grid container>\r\n                                <Grid item md={6} sm={12} xs={12} className=\"winorlose\">\r\n                                    <p>Stop On Loss (unlimited)</p>\r\n                                    <input type=\"text\" className=\"unlimitedText\" defaultValue=\"10\" value = {this.state.stopOnLoss} onChange = {this.handleOnLoss}/>\r\n                                    <p>On Win</p>\r\n                                    <div className=\"winloseBtn\">\r\n                                        <button className=\"groupBtn reset1\" onClick = {()=>this.setState({stopOnLoss: 10})}>Reset</button>\r\n                                        <button className=\"groupBtn increase1\" onClick = {()=>this.setState({stopOnLoss: Number(this.state.stopOnLoss)+1})}>Increase</button>\r\n                                    </div>\r\n                                </Grid>\r\n                                <Grid item md={6} sm={12} xs={12} className=\"winorlose\">\r\n                                    <p>Stop On Profit (unlimited)</p>\r\n                                    <input type=\"text\" className=\"unlimitedText\" defaultValue=\"10\" value = {this.state.stopOnProfit} onChange = {this.handleOnProfit}/>\r\n                                    <p>On Lose</p>\r\n                                    <div className=\"winloseBtn\">\r\n                                        <button className=\"groupBtn reset2\" onClick = {()=>this.setState({stopOnProfit: 10})}>Reset</button>\r\n                                        <button className=\"groupBtn increase2\" onClick = {()=>this.setState({stopOnProfit: Number(this.state.stopOnProfit)+1})}>Increase</button>\r\n                                    </div>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item md={3} sm={12} xs={12}>\r\n                            <Grid container>\r\n                                <Grid item md={12} sm={12} xs={12}>\r\n                                    <button type=\"button\" className=\"startBtn\" style={style2} onClick = {this.handleAutoBet}>{this.state.autoFlag?\"stop\":\"start\"}</button>\r\n                                </Grid>\r\n                                <Grid item md={12} sm={12} xs={12}>\r\n                                    <div className = \"x-classic-betting-state\">\r\n                                        {(Number(this.state.stopOnLoss)+Number(this.state.totalProfit)).toString().slice(0, 5)}\r\n                                    </div>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <img src={dice1} alt=\"dice1\" className=\"homeDice1\"/>\r\n                    <img src={dice2} alt=\"dice2\" className=\"homeDice2\"/>\r\n                    <img src={dice3} alt=\"dice3\" className=\"homeDice3\"/>\r\n                    <img src={dice4} alt=\"dice4\" className=\"homeDice4\"/>\r\n                    <img src={effect} alt=\"effect\" className=\"homeEffect\"/>\r\n                </div>\r\n                <div style = {{backgroundColor: \"#76006c\"}}>\r\n                    <Grid container spacing={3} className=\"diceGridTable\" justify=\"center\">\r\n                        <Grid item xs={12} sm={12} md={12} className=\"tableButtons\">\r\n                            <p>Live Player Bets</p>\r\n                            <div className=\"tableBtns\">\r\n                                <button className=\"allPlayers\" onClick = {this.handleAllPlayer}>All Players</button>\r\n                                <button className=\"allPlayers\" onClick = {this.handleMyBets}>My bets</button>\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={12} md={12}>\r\n                            <LiveTable rows = {!this.state.tableViewFlag?this.state.stateData:this.state.stateMyData} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n                <Footer></Footer>\r\n            </div>\r\n        )\r\n    }\r\n  }\r\n  \r\n// const mapStateToProps = state => {\r\n//     return {\r\n//         items: state,\r\n//     }\r\n// }\r\n\r\n// const mapDispatchToProps = {\r\n//     setItems,\r\n//     updateTimer\r\n// }\r\n  \r\nexport default DiceLL;\r\n","D:\\workspace\\react\\betting demos\\project\\client\\src\\pages\\careful.js",["157","158","159","160","161","162","163","164","165"],"import React from 'react';\r\n// import '../App.css';\r\nimport { Grid, Hidden } from '@material-ui/core';\r\nimport LiveTable from '../components/LiveTable';\r\nimport {Header} from '../components/Header';\r\nimport Footer from '../components/Footer';\r\nimport backgroundImg from '../assets/img/background.png';\r\nimport dice1 from '../assets/img/dice1.png';\r\nimport dice2 from '../assets/img/dice2.png';\r\nimport dice3 from '../assets/img/dice3.png';\r\nimport dice4 from '../assets/img/dice4.png';\r\nimport effect from '../assets/img/effect.png';\r\nimport diceYellow from '../assets/img/dice_yellow.png'\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport CarefulCard1 from '../components/careful_card1';\r\nimport CarefulCard2 from '../components/careful_card2';\r\nimport CarefulCard3 from '../components/careful_card3';\r\n\r\nconst ColoredLine = ({ color }) => (\r\n    <hr\r\n        style={{\r\n            color: color,\r\n            backgroundColor: color,\r\n            height: 0.1\r\n        }}\r\n    />\r\n);\r\n\r\nvar rootStyle = {\r\n    width: \"100%\",\r\n    backgroundImage: `url(${backgroundImg})`,\r\n    height: \"100%\",\r\n    backgroundSize: 'cover',\r\n    backgroundPosition: 'center'\r\n};\r\n\r\nconst HigherSlide = withStyles({\r\n    root: {\r\n      color: '#7fc03e',\r\n      height: 20,\r\n    },\r\n    thumb: {\r\n      display: \"none\"\r\n    },\r\n    active: {},\r\n    valueLabel: {\r\n      left: 'calc(-50% + 4px)',\r\n    },\r\n    track: {\r\n        color: \"#ee2748\",\r\n      height: 20,\r\n      borderRadius: 10,\r\n    },\r\n    rail: {\r\n        color: '#7fc03e',\r\n      height: 20,\r\n      borderRadius: 10,\r\n      opacity: 1\r\n    },\r\n  })(Slider);\r\n\r\n  const PayoutSlide = withStyles({\r\n    root: {\r\n      color: '#7fc03e',\r\n      height: 10,\r\n    },\r\n    thumb: {\r\n      display: \"none\"\r\n    },\r\n    active: {},\r\n    valueLabel: {\r\n      left: 'calc(-50% + 4px)',\r\n    },\r\n    track: {\r\n        color: \"#c30a96\",\r\n      height: 10,\r\n    },\r\n    rail: {\r\n        backgroundImage: \"linear-gradient( to right,#316fdc 0%,#3c1c65 100% )\",\r\n      height: 5,\r\n      opacity: 1,\r\n      marginTop: 2.5\r\n    },\r\n  })(Slider);\r\n\r\n\r\nclass ClassicDice extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            higherVal: 50,\r\n            payoutVal: 1.985\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const style1 = {backgroundImage: \"linear-gradient( to right,#14aafc 0%,#4f52ee 100% )\" }\r\n        const style2 = {backgroundImage: \"linear-gradient( to right,#d30c90 0%,#7d02c6 100% )\" }\r\n        const style3 = {backgroundImage: \"linear-gradient( to right,#f2882b 0%,#fb6a49 100% )\" }\r\n        const style4 = {backgroundImage: \"linear-gradient( to right,#33bae4 0%,#d929fb 100% )\" }\r\n        const cardTitle = \"Be Careful Game!!\";\r\n        return (\r\n            <div style={rootStyle}>\r\n                <Header></Header>\r\n                <Hidden smDown>\r\n                <Grid container spacing={3} className=\"diceGrid\" justify=\"center\">\r\n                    <Grid item xs={12} sm={8} md={12} >\r\n                        <div className=\"diceTitle\" style={style3}>\r\n                            {cardTitle}\r\n                            <img src={diceYellow} />\r\n                        </div>\r\n                        \r\n                    </Grid>\r\n                </Grid>\r\n                </Hidden>\r\n\r\n                <Grid container spacing={3} className=\"diceGrid x-farming-blog1\" justify=\"center\">\r\n                    <Grid item xs={12} sm={12} md={12} className = \"text-left x-display-flex\">\r\n                        <div className = \"x-lamp x-font-normal-white2\">\r\n                            Please note that this is a ZERO-SUM game with a slight modification! please understand the RISK of a zero sum game, the last person to join the game will not receive UPLINE benefit!\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={12} className = \"text-left x-display-flex\">\r\n                        <div className = \"x-lamp\">\r\n                            <img src = {diceYellow} alt = \"dicepurple\" width='25px' />\r\n                        </div>\r\n                        <div className = \"x-lamp x-font-normal-white2\">\r\n                            Do NOT play UNLESS you are ready to lose the amount of token you put into the game\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={12} className = \"text-left x-display-flex\">\r\n                        <div className = \"x-lamp\">\r\n                            <img src = {diceYellow} alt = \"dicepurple\" width='25px' />\r\n                        </div>\r\n                        <div className = \"x-lamp x-font-normal-white2\">\r\n                            Do NOT play UNLESS you have read this article\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={12} className = \"text-left x-display-flex\">\r\n                        <div className = \"x-lamp\">\r\n                            <img src = {diceYellow} alt = \"dicepurple\" width='25px' />\r\n                        </div>\r\n                        <div className = \"x-lamp x-font-normal-white2\">\r\n                            This is a public smart contract The tokens are managed by the contract\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid container spacing={3} className=\"diceGrid x-farming-blog1\" justify=\"center\">\r\n                    <Grid item xs={12} sm={12} md={12} className = \"text-left x-display-flex\">\r\n                        <div className = \"x-lamp x-font-normal-orange2\">\r\n                            When someone join the game\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={12} className = \"text-left x-display-flex\">\r\n                        <div className = \"x-lamp\">\r\n                            <img src = {diceYellow} alt = \"dicepurple\" width='25px' />\r\n                        </div>\r\n                        <div className = \"x-lamp x-font-normal-white2\">\r\n                            8 UPLINE will receive 60% of the token\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={12} className = \"text-left x-display-flex\">\r\n                        <div className = \"x-lamp\">\r\n                            <img src = {diceYellow} alt = \"dicepurple\" width='25px' />\r\n                        </div>\r\n                        <div className = \"x-lamp x-font-normal-white2\">\r\n                            24 TRUE RANDOM player will receive 30% of the token\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={12} className = \"text-left x-display-flex\">\r\n                        <div className = \"x-lamp\">\r\n                            <img src = {diceYellow} alt = \"dicepurple\" width='25px' />\r\n                        </div>\r\n                        <div className = \"x-lamp x-font-normal-white2\">\r\n                            10% of the token will be used as an insurance fund which will be put at defi project(s) to generate yields This will give a minimum of 2% APY on the insurance fund\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={12} className = \"text-left x-display-flex\">\r\n                        <div className = \"x-lamp\">\r\n                            <img src = {diceYellow} alt = \"dicepurple\" width='25px' />\r\n                        </div>\r\n                        <div className = \"x-lamp x-font-normal-white2\">\r\n                            Will receive CARE token, FREEZE this token to receive RANDOM drops of yields generated from the insurance fund\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n                <div className = \" diceGrid text-left x-font-big-white\">\r\n                    network State\r\n                </div>\r\n                <Grid container spacing={3} className=\"diceGrid x-farming-blog2\" justify=\"center\">\r\n                    <Grid item xs={12} sm={6} md={3} className = \"text-left x-display-flex\">\r\n                        <CarefulCard1 \r\n                            title = \"Totla Spent\"\r\n                            value = \"356,780 TT\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={3} className = \"text-left x-display-flex\">\r\n                        <CarefulCard1 \r\n                            title = \"Insurance Processed\"\r\n                            value = \"32,461 TT\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={3} className = \"text-left x-display-flex\">\r\n                        <CarefulCard1 \r\n                            title = \"Insurance Claimed\"\r\n                            value = \"12,476100207 TT\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={3} className = \"text-left x-display-flex\">\r\n                        <CarefulCard1 \r\n                            title = \"Player Count\"\r\n                            value = \"1,325\"\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <div className = \" diceGrid text-left x-font-big-white\">\r\n                    Your State\r\n                </div>\r\n                <Grid container spacing={3} className=\"diceGrid x-farming-blog2\" justify=\"center\">\r\n                    <Grid item xs={12} sm={6} md={3} className = \"text-left x-display-flex\">\r\n                        <CarefulCard2 \r\n                            title = \"Totla Spent\"\r\n                            value = \"356,780 TT\"\r\n                            backgroundColor = \"#ff0039\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={3} className = \"text-left x-display-flex\">\r\n                        <CarefulCard2 \r\n                            title = \"Insurance Processed\"\r\n                            value = \"32,461 TT\"\r\n                            backgroundColor = \"#2780e3\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={3} className = \"text-left x-display-flex\">\r\n                        <CarefulCard2\r\n                            title = \"Insurance Claimed\"\r\n                            value = \"12,476100207 TT\"\r\n                            backgroundColor = \"#ff7518\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={3} className = \"text-left x-display-flex\">\r\n                        <CarefulCard2\r\n                            title = \"Player Count\"\r\n                            value = \"1,325\"\r\n                            backgroundColor = \"#3fb618\"\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3} className = \"diceGrid\" justify = \"center\">\r\n                    <Grid item xs = {12} sm={12} md={12} className = \"x-font-big-white\">\r\n                        Ready to play??\r\n                    </Grid>\r\n                    <Grid item xs = {12} sm={12} md={12} className = \"x-font-normal-red\">\r\n                        Are you ready if you lose??\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3} className=\"diceGrid\" justify=\"center\">\r\n                        <CarefulCard3 />\r\n                </Grid>\r\n                <Grid container spacing={3} className=\"diceGrid\" justify=\"center\">\r\n                        <CarefulCard3 />\r\n                </Grid>\r\n                <Grid container spacing={3} className=\"diceGrid\" justify=\"center\">\r\n                        <CarefulCard3 />\r\n                </Grid>\r\n                <Grid container spacing={3} className=\"diceGrid\" justify=\"center\">\r\n                        <CarefulCard3 />\r\n                </Grid>\r\n                <Grid container spacing={3} className=\"diceGrid\" justify=\"center\">\r\n                        <CarefulCard3 />\r\n                </Grid>\r\n                <Footer></Footer>\r\n                <img src={dice1} alt=\"dice1\" className=\"homeDice1\"/>\r\n                <img src={dice2} alt=\"dice2\" className=\"homeDice2\"/>\r\n                <img src={dice3} alt=\"dice3\" className=\"homeDice3\"/>\r\n                <img src={dice4} alt=\"dice4\" className=\"homeDice4\"/>\r\n                <img src={effect} alt=\"effect\" className=\"homeEffect\"/>\r\n            </div>\r\n        )\r\n    }\r\n  }\r\n  \r\n// const mapStateToProps = state => {\r\n//     return {\r\n//         items: state,\r\n//     }\r\n// }\r\n\r\n// const mapDispatchToProps = {\r\n//     setItems,\r\n//     updateTimer\r\n// }\r\n  \r\nexport default ClassicDice;\r\n","D:\\workspace\\react\\betting demos\\project\\client\\src\\pages\\dice_ll.js",["166","167","168","169","170","171","172","173","174","175","176","177","178"],"import React from 'react';\r\n// import '../App.css';\r\nimport { Grid } from '@material-ui/core';\r\nimport LiveTable from '../components/LiveTable';\r\nimport {Header, socket} from '../components/Header';\r\nimport Footer from '../components/Footer';\r\nimport backgroundImg from '../assets/img/background.png';\r\nimport dice1 from '../assets/img/dice1.png';\r\nimport dice2 from '../assets/img/dice2.png';\r\nimport dice3 from '../assets/img/dice3.png';\r\nimport dice4 from '../assets/img/dice4.png';\r\nimport effect from '../assets/img/effect.png';\r\nimport diceBlue from '../assets/img/dice_blue.png'\r\nimport dicePink from '../assets/img/dice_pink.png'\r\nimport diceYellow from '../assets/img/dice_yellow.png'\r\nimport dicePurple from '../assets/img/dice_purple.png'\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport { wait } from '@testing-library/react';\r\nimport Web3 from 'web3';\r\nimport Abi from '../assets/abi/abi.json';\r\n\r\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\nvar web3 = new Web3();\r\nvar tokenAddress = \"0xf76e1b7ff23b462bf9f0562dcf7929c032c84ffb\";\r\nvar myContract = new web3.eth.Contract(Abi, tokenAddress);\r\nvar gasLimitHex = web3.utils.toHex(90000);\r\n\r\nvar rootStyle = {\r\n    width: \"100%\",\r\n    backgroundImage: `url(${backgroundImg})`,\r\n    height: \"100%\",\r\n    backgroundSize: 'cover',\r\n    backgroundPosition: 'center'\r\n};\r\n\r\nconst HigherSlide = withStyles({\r\n    root: {\r\n      color: '#7fc03e',\r\n      height: 20,\r\n    },\r\n    thumb: {\r\n      display: \"none\"\r\n    },\r\n    active: {},\r\n    valueLabel: {\r\n      left: 'calc(-50% + 4px)',\r\n    },\r\n    track: {\r\n        color: \"#ee2748\",\r\n      height: 20,\r\n      borderRadius: 10,\r\n    },\r\n    rail: {\r\n        color: '#7fc03e',\r\n      height: 20,\r\n      borderRadius: 10,\r\n      opacity: 1\r\n    },\r\n  })(Slider);\r\n\r\n  const PayoutSlide = withStyles({\r\n    root: {\r\n      color: '#7fc03e',\r\n      height: 10,\r\n    },\r\n    thumb: {\r\n      display: \"none\"\r\n    },\r\n    active: {},\r\n    valueLabel: {\r\n      left: 'calc(-50% + 4px)',\r\n    },\r\n    track: {\r\n        color: \"#c30a96\",\r\n      height: 10,\r\n    },\r\n    rail: {\r\n        backgroundImage: \"linear-gradient( to right,#316fdc 0%,#3c1c65 100% )\",\r\n      height: 5,\r\n      opacity: 1,\r\n      marginTop: 2.5\r\n    },\r\n  })(Slider);\r\n\r\nfunction timeout(delay: number) {\r\n    return new Promise( res => setTimeout(res, delay) );\r\n}\r\n\r\nfunction createData(id, player, bet, profit, payout, guess, roll) {\r\n    return { id, player, bet, profit, payout, guess, roll };\r\n}\r\n\r\nconst rows = [\r\n    // createData(1, 'Yark G', 50, \"+79.13%\", 37.41, \"eg.text\", \"eg.text\"),\r\n    // createData(2, 'Action', 52, \"+79.13%\", 37.41, \"eg.text\", \"eg.text\")\r\n  ];\r\n\r\n  const myRows = [\r\n    // createData(1, 'Yark G', 50, \"+79.13%\", 37.41, \"eg.text\", \"eg.text\"),\r\n    // createData(2, 'Action', 52, \"+79.13%\", 37.41, \"eg.text\", \"eg.text\")\r\n  ];\r\n\r\n  var i=1;\r\n  var k=0;\r\nclass DiceLL extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.handleHigher = this.handleHigher.bind(this);\r\n        this.handlePayout = this.handlePayout.bind(this);\r\n        this.handleHigherVal = this.handleHigherVal.bind(this);\r\n        this.handlePayoutVal = this.handlePayoutVal.bind(this);\r\n\r\n        this.publicKey = React.createRef();\r\n\r\n        this.state = {\r\n            flag:true,\r\n            amount: 1,\r\n            higherVal: 50,\r\n            winChance: 50,\r\n            payoutVal: 98/50,\r\n            profit: 98/50,\r\n            result: 0,\r\n            totalData: [],\r\n            stateData: [],\r\n            stateMyData: [],\r\n            tableViewFlag: false,\r\n            stopOnLoss: 10,\r\n            stopOnProfit: 10,\r\n            autoFlag: false,\r\n            totalProfit: 0\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        if(window.ethereum){\r\n            socket.on(\"users_count\", (data)=>{\r\n                console.log(data);\r\n                this.setState({totalData: data});\r\n                rows.push(createData(1, this.state.totalData.publicKey, this.state.totalData.amount, this.state.totalData.profit, this.state.totalData.payoutVal, this.state.totalData.higherVal, this.state.totalData.roll))\r\n                this.setState({stateData:rows});\r\n                if(data.publicKey === window.ethereum.selectedAddress){\r\n                    myRows.push(createData(1, data.publicKey, data.amount, data.profit, data.payoutVal, data.higherVal, data.roll));\r\n                    this.setState({stateMyData:myRows});\r\n                }\r\n            })\r\n        }\r\n    }\r\n    \r\n\r\n    handleHigherVal = (event) => {\r\n        this.setState({winChance: event.target.value});\r\n        this.setState({higherVal: 100-event.target.value});\r\n        this.setState({payoutVal: 98/event.target.value})\r\n        this.setState({profit: (98/event.target.value)*this.state.amount})\r\n    }\r\n\r\n    handleHigher = (event, value) => {\r\n        this.setState({higherVal: value});\r\n        this.setState({winChance: 100-value});\r\n        this.setState({payoutVal: 98/value});\r\n        this.setState({profit: this.state.amount*(98/value)})\r\n    }\r\n\r\n    handlePayoutVal = (event) => {\r\n        \r\n    }\r\n\r\n    handlePayout = (event, value) => {\r\n        this.setState({payoutVal: value});\r\n    }\r\n\r\n    handleAmount = (event) => {\r\n        this.setState({amount: event.target.value});\r\n        this.setState({profit: (98/(100-this.state.higherVal))*event.target.value})\r\n    }\r\n\r\n    amountDivision = (event) =>{\r\n        var tempAmount = this.state.amount/2;\r\n        this.setState({amount: this.state.amount/2});\r\n        this.setState({profit: this.state.payoutVal*tempAmount})\r\n    }\r\n    amountDouble = (event) =>{\r\n        var tempAmount = this.state.amount*2;\r\n        this.setState({amount: this.state.amount*2});\r\n        this.setState({profit: this.state.payoutVal*tempAmount})\r\n    }\r\n    minHigher = () =>{\r\n        this.setState({winChance: 1});\r\n        this.setState({higherVal: 98});\r\n        this.setState({payoutVal: 98})\r\n        this.setState({profit: this.state.amount*98})\r\n    }\r\n    maxHigher = () =>{\r\n        this.setState({winChance: 98});\r\n        this.setState({higherVal: 1});\r\n        this.setState({payoutVal: 1})\r\n        this.setState({profit: this.state.amount*1})\r\n    }\r\n\r\n    handleOnLoss = (e) =>{\r\n        console.log(e.target.value)\r\n        this.setState({stopOnLoss:e.target.value})\r\n    }\r\n    handleOnProfit = (e) =>{\r\n        this.setState({stopOnProfit: e.target.value})\r\n    }\r\n\r\n    onBet = async () =>{\r\n        if (window.ethereum) {\r\n            var web3 = new Web3(new Web3.providers.HttpProvider(\"https://bsc-dataseed.binance.org/\"));\r\n            //console.log(web3.givenProvider.selectedAddress);\r\n            console.log(window.ethereum._metamask.isUnlocked());\r\n            let data = myContract.methods.transfer(\"0x413EBD57EbA0f200ed592c31E7dB6119C92A7973\", web3.utils.toHex(web3.utils.toWei(this.state.amount.toString()))).encodeABI();\r\n\r\n            const chainId = await window.ethereum.request({ method: 'eth_chainId' });\r\n            var txdetail = {\r\n                //\"nonce\":'0x' + lastCountOfTransaction.toString(16),\r\n              // nonce: '0x00',\r\n                from: window.ethereum.selectedAddress,\r\n                to: tokenAddress,\r\n                value: web3.utils.toHex(web3.utils.toWei(\"0\")),\r\n                gas: gasLimitHex,\r\n                gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei')),\r\n                chainId:chainId,\r\n                data:data\r\n            }\r\n            window.ethereum.request({ method: 'eth_sendTransaction', params: [txdetail] }).then( async (res) => {\r\n                console.log('res ',res);\r\n                console.log(txdetail);\r\n                i++;\r\n                let randomNumber\r\n                for(var j=0; j<=15; j++){\r\n                    await timeout(100);\r\n                    randomNumber = Math.floor(Math.random() * 100);\r\n                    this.setState({result: randomNumber});\r\n                }\r\n                console.log(this.publicKey.current.state.publicKey);\r\n                if(randomNumber>=this.state.higherVal){\r\n                    var winnerData = {\r\n                        \"publicKey\": window.ethereum.selectedAddress,\r\n                        \"amount\": this.state.amount,\r\n                        \"profit\": this.state.profit,\r\n                        \"payoutVal\": this.state.payoutVal,\r\n                        \"higherVal\": this.state.higherVal,\r\n                        \"roll\": randomNumber\r\n                    }\r\n                    socket.emit(\"set winner\", winnerData)\r\n                }\r\n                else{\r\n                    var loserData = {\r\n                        \"publicKey\": window.ethereum.selectedAddress,\r\n                        \"amount\": this.state.amount,\r\n                        \"profit\": 0,\r\n                        \"payoutVal\": this.state.payoutVal,\r\n                        \"higherVal\": this.state.higherVal,\r\n                        \"roll\": randomNumber\r\n                    }        \r\n                    socket.emit(\"set loser\", loserData)\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nhandleAutoBet = async () =>{\r\n    this.setState({autoFlag: !this.state.autoFlag});\r\n    await delay(500);\r\n    if(this.state.autoFlag){\r\n        if (window.ethereum) {\r\n            var web3 = new Web3(new Web3.providers.HttpProvider(\"https://bsc-dataseed.binance.org/\"));\r\n            //console.log(web3.givenProvider.selectedAddress);\r\n            console.log(window.ethereum._metamask.isUnlocked());\r\n            let data = myContract.methods.transfer(\"0x413EBD57EbA0f200ed592c31E7dB6119C92A7973\", web3.utils.toHex(web3.utils.toWei(this.state.stopOnLoss.toString()))).encodeABI();\r\n\r\n            const chainId = await window.ethereum.request({ method: 'eth_chainId' });\r\n            var txdetail = {\r\n                from: window.ethereum.selectedAddress,\r\n                to: tokenAddress,\r\n                value: web3.utils.toHex(web3.utils.toWei(\"0\")),\r\n                gas: gasLimitHex,\r\n                gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei')),\r\n                chainId: chainId,\r\n                data: data\r\n            }\r\n            window.ethereum.request({ method: 'eth_sendTransaction', params: [txdetail] }).then( async (res) => {\r\n                console.log('res ',res);\r\n                console.log(txdetail);\r\n                let randomNumber;\r\n                console.log(this.state.autoFlag);\r\n                while(this.state.totalProfit>=-1*this.state.stopOnLoss+this.state.amount&&this.state.totalProfit<=this.state.stopOnProfit-this.state.profit&&this.state.autoFlag){\r\n                    randomNumber = Math.floor(Math.random() * 100);\r\n                    console.log(randomNumber)\r\n                    await delay(100);\r\n                    if(randomNumber>=this.state.higherVal){\r\n                        // this.state.totalProfit+=this.state.profit-this.state.amount;\r\n                        this.setState({totalProfit:this.state.totalProfit+this.state.profit-this.state.amount})\r\n                    }\r\n                    else{\r\n                        // this.state.totalProfit-=this.state.amount;\r\n                        this.setState({totalProfit:this.state.totalProfit-this.state.amount})\r\n                    }\r\n                }\r\n                var autoData = {\r\n                    \"publicKey\": window.ethereum.selectedAddress,\r\n                    \"amount\": this.state.stopOnLoss,\r\n                    \"profit\": this.state.totalProfit,\r\n                    \"payoutVal\": this.state.payoutVal,\r\n                    \"higherVal\": this.state.higherVal,\r\n                    \"roll\": \"autoBet\"\r\n                }\r\n                socket.emit(\"set autoBet\", autoData);\r\n                console.log(\"wowow\",this.state.totalProfit)\r\n                this.setState({autoFlag: false})\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nhandleAllPlayer = () =>{\r\n    this.setState({tableViewFlag: false})\r\n  }\r\n\r\n  handleMyBets = () =>{\r\n    this.setState({tableViewFlag: true})\r\n  }\r\n\r\n\r\n    render() {\r\n        const style1 = {backgroundImage: \"linear-gradient( to right,#14aafc 0%,#4f52ee 100% )\" }\r\n        const style2 = {backgroundImage: \"linear-gradient( to right,#d30c90 0%,#7d02c6 100% )\" }\r\n        const style3 = {backgroundImage: \"linear-gradient( to right,#f2882b 0%,#fb6a49 100% )\" }\r\n        const style4 = {backgroundImage: \"linear-gradient( to right,#33bae4 0%,#d929fb 100% )\" }\r\n        const cardTitle = \"Dice II\";\r\n        return (\r\n            <div>\r\n                <div className=\"dashboard\" style={rootStyle}>\r\n                    <Header ref = {this.publicKey} />\r\n                    <Grid container spacing={3} className=\"diceGrid\" justify=\"center\">\r\n                        <Grid item xs={12} sm={12} md={12} >\r\n                            <div className=\"diceTitle\" style={style2}>\r\n                                {cardTitle}\r\n                                <img src={dicePink} />\r\n                            </div>\r\n                            \r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container spacing={3} className=\"diceGrid\" justify=\"center\">\r\n                        <Grid item xs={12} sm={6} md={3} className=\"diceInfo\">\r\n                            <p>Bet Amount</p>\r\n                            <input type=\"text\" className=\"infoCard\" value = {this.state.amount} onChange = {this.handleAmount} />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6} md={3} className=\"diceInfo\">\r\n                            <p>Win Chance %</p>\r\n                            <input className=\"infoCard\" value={this.state.winChance} onChange={this.handleHigherVal} min = \"1\" max = \"100\"/>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6} md={3} className=\"diceInfo\">\r\n                            <p>Payout (x)</p>\r\n                            <input type=\"text\" className=\"infoCard\" value={this.state.payoutVal.toFixed(3)} onChange={this.handlePayoutVal} maxlength=\"4\" />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6} md={3} className=\"diceInfo\">\r\n                            <p>Profit (SLSH)</p>\r\n                            <input className=\"infoCard\" value={this.state.profit.toFixed(3)} />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6} md={3} className=\"diceBtn1\">\r\n                            <button onClick = {this.amountDivision}>1/2</button>\r\n                            <button onClick = {this.amountDouble}>2x</button>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6} md={3} className=\"diceBtn1\">\r\n                            <button onClick = {this.minHigher}>Min</button>\r\n                            <button onClick = {this.maxHigher}>Max</button>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6} md={6} className=\"diceBtn3\">\r\n                            <button onClick = {this.onBet}>BET</button>\r\n                        </Grid>\r\n                    </Grid>\r\n                    \r\n                    <Grid container spacing={3} className=\"diceGrid levelGrid\" justify=\"center\">\r\n                        <Grid container>\r\n                            <Grid item md={3} sm={3} xs={3} className=\"lower\">\r\n                                LOWER\r\n                            </Grid>\r\n                            <Grid item md={9} xs={9} sm={9}className=\"higher\">\r\n                                HIGHER\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12} sm={12} >\r\n                                <PayoutSlide valueLabelDisplay=\"auto\" aria-label=\"pretto slider\" value={this.state.higherVal, this.state.higherVal} onChange={this.handleHigher} min={0} max={100} step={1}/>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <HigherSlide valueLabelDisplay=\"auto\" aria-label=\"pretto slider\" value={this.state.result, this.state.result} min={0} max={100}/>\r\n                        <p className=\"progressTitle\">{`Result : ${this.state.result} >= ${this.state.higherVal}`}</p>\r\n                    </Grid>\r\n                    \r\n                    <Grid container spacing={3} className=\"autoGrid\" justify=\"center\">\r\n                        <Grid item xs={12} sm={12} md={12}>\r\n                            <button type=\"button\" className=\"playBtn autoBtn\" style={style2}>Go to Automatic Bets</button>\r\n                        </Grid>\r\n                    </Grid>\r\n                    \r\n                    <Grid container spacing={3} className=\"diceGrid-table-top resultGrid\" justify=\"center\">\r\n                        <Grid item md={9} sm={12} xs={12} >\r\n                            <Grid container>\r\n                                <Grid item md={6} sm={12} xs={12} className=\"winorlose\">\r\n                                    <p>Stop On Loss (unlimited)</p>\r\n                                    <input type=\"text\" className=\"unlimitedText\" defaultValue=\"10\" value = {this.state.stopOnLoss} onChange = {this.handleOnLoss}/>\r\n                                    <p>On Win</p>\r\n                                    <div className=\"winloseBtn\">\r\n                                        <button className=\"groupBtn reset1\" onClick = {()=>this.setState({stopOnLoss: 10})}>Reset</button>\r\n                                        <button className=\"groupBtn increase1\" onClick = {()=>this.setState({stopOnLoss: Number(this.state.stopOnLoss)+1})}>Increase</button>\r\n                                    </div>\r\n                                </Grid>\r\n                                <Grid item md={6} sm={12} xs={12} className=\"winorlose\">\r\n                                    <p>Stop On Profit (unlimited)</p>\r\n                                    <input type=\"text\" className=\"unlimitedText\" defaultValue=\"10\" value = {this.state.stopOnProfit} onChange = {this.handleOnProfit}/>\r\n                                    <p>On Lose</p>\r\n                                    <div className=\"winloseBtn\">\r\n                                        <button className=\"groupBtn reset2\" onClick = {()=>this.setState({stopOnProfit: 10})}>Reset</button>\r\n                                        <button className=\"groupBtn increase2\" onClick = {()=>this.setState({stopOnProfit: Number(this.state.stopOnProfit)+1})}>Increase</button>\r\n                                    </div>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item md={3} sm={12} xs={12}>\r\n                            <Grid container>\r\n                                <Grid item md={12} sm={12} xs={12}>\r\n                                    <button type=\"button\" className=\"startBtn\" style={style2} onClick = {this.handleAutoBet}>{this.state.autoFlag?\"stop\":\"start\"}</button>\r\n                                </Grid>\r\n                                <Grid item md={12} sm={12} xs={12}>\r\n                                    <div className = \"x-classic-betting-state\">\r\n                                        {(Number(this.state.stopOnLoss)+Number(this.state.totalProfit)).toString().slice(0, 5)}\r\n                                    </div>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <img src={dice1} alt=\"dice1\" className=\"homeDice1\"/>\r\n                    <img src={dice2} alt=\"dice2\" className=\"homeDice2\"/>\r\n                    <img src={dice3} alt=\"dice3\" className=\"homeDice3\"/>\r\n                    <img src={dice4} alt=\"dice4\" className=\"homeDice4\"/>\r\n                    <img src={effect} alt=\"effect\" className=\"homeEffect\"/>\r\n                </div>\r\n                <div style = {{backgroundColor: \"#76006c\"}}>\r\n                    <Grid container spacing={3} className=\"diceGridTable\" justify=\"center\">\r\n                        <Grid item xs={12} sm={12} md={12} className=\"tableButtons\">\r\n                            <p>Live Player Bets</p>\r\n                            <div className=\"tableBtns\">\r\n                                <button className=\"allPlayers\" onClick = {this.handleAllPlayer}>All Players</button>\r\n                                <button className=\"allPlayers\" onClick = {this.handleMyBets}>My bets</button>\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={12} md={12}>\r\n                            <LiveTable rows = {!this.state.tableViewFlag?this.state.stateData:this.state.stateMyData} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n                <Footer></Footer>\r\n            </div>\r\n        )\r\n    }\r\n  }\r\n  \r\n// const mapStateToProps = state => {\r\n//     return {\r\n//         items: state,\r\n//     }\r\n// }\r\n\r\n// const mapDispatchToProps = {\r\n//     setItems,\r\n//     updateTimer\r\n// }\r\n  \r\nexport default DiceLL;\r\n","D:\\workspace\\react\\betting demos\\project\\client\\src\\pages\\referral_dice.js",["179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194"],"import React from 'react';\r\n// import '../App.css';\r\nimport { Grid } from '@material-ui/core';\r\nimport LiveTable from '../components/LiveTable';\r\nimport {Header, socket} from '../components/Header';\r\nimport Footer from '../components/Footer';\r\nimport backgroundImg from '../assets/img/background.png';\r\nimport dice1 from '../assets/img/dice1.png';\r\nimport dice2 from '../assets/img/dice2.png';\r\nimport dice3 from '../assets/img/dice3.png';\r\nimport dice4 from '../assets/img/dice4.png';\r\nimport effect from '../assets/img/effect.png';\r\nimport diceBlue from '../assets/img/dice_blue.png'\r\nimport dicePink from '../assets/img/dice_pink.png'\r\nimport diceYellow from '../assets/img/dice_yellow.png'\r\nimport dicePurple from '../assets/img/dice_purple.png'\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport { wait } from '@testing-library/react';\r\nimport Web3 from 'web3';\r\nimport Abi from '../assets/abi/abi.json';\r\n\r\nimport Axios from 'axios';\r\n\r\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\nvar web3 = new Web3();\r\nvar tokenAddress = \"0xf76e1b7ff23b462bf9f0562dcf7929c032c84ffb\";\r\nvar myContract = new web3.eth.Contract(Abi, tokenAddress);\r\nvar gasLimitHex = web3.utils.toHex(90000);\r\n\r\nvar rootStyle = {\r\n    width: \"100%\",\r\n    backgroundImage: `url(${backgroundImg})`,\r\n    height: \"100%\",\r\n    backgroundSize: 'cover',\r\n    backgroundPosition: 'center'\r\n};\r\n\r\nconst HigherSlide = withStyles({\r\n    root: {\r\n      color: '#7fc03e',\r\n      height: 20,\r\n    },\r\n    thumb: {\r\n      display: \"none\"\r\n    },\r\n    active: {},\r\n    valueLabel: {\r\n      left: 'calc(-50% + 4px)',\r\n    },\r\n    track: {\r\n        color: \"#ee2748\",\r\n      height: 20,\r\n      borderRadius: 10,\r\n    },\r\n    rail: {\r\n        color: '#7fc03e',\r\n      height: 20,\r\n      borderRadius: 10,\r\n      opacity: 1\r\n    },\r\n  })(Slider);\r\n\r\n  const PayoutSlide = withStyles({\r\n    root: {\r\n      color: '#7fc03e',\r\n      height: 10,\r\n    },\r\n    thumb: {\r\n      display: \"none\"\r\n    },\r\n    active: {},\r\n    valueLabel: {\r\n      left: 'calc(-50% + 4px)',\r\n    },\r\n    track: {\r\n        color: \"#c30a96\",\r\n      height: 10,\r\n    },\r\n    rail: {\r\n        backgroundImage: \"linear-gradient( to right,#316fdc 0%,#3c1c65 100% )\",\r\n      height: 5,\r\n      opacity: 1,\r\n      marginTop: 2.5\r\n    },\r\n  })(Slider);\r\n\r\nfunction timeout(delay: number) {\r\n    return new Promise( res => setTimeout(res, delay) );\r\n}\r\n\r\nfunction createData(id, player, bet, profit, payout, guess, roll) {\r\n    return { id, player, bet, profit, payout, guess, roll };\r\n  }\r\n\r\nconst rows = [\r\n    // createData(1, 'Yark G', 50, \"+79.13%\", 37.41, \"eg.text\", \"eg.text\"),\r\n    // createData(2, 'Action', 52, \"+79.13%\", 37.41, \"eg.text\", \"eg.text\")\r\n];\r\n\r\nconst myRows = [\r\n    // createData(1, 'Yark G', 50, \"+79.13%\", 37.41, \"eg.text\", \"eg.text\"),\r\n    // createData(2, 'Action', 52, \"+79.13%\", 37.41, \"eg.text\", \"eg.text\")\r\n];\r\n\r\nvar i=1;\r\nvar k=0;\r\nclass DiceLL extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.handleHigher = this.handleHigher.bind(this);\r\n        this.handlePayout = this.handlePayout.bind(this);\r\n        this.handleHigherVal = this.handleHigherVal.bind(this);\r\n        this.handlePayoutVal = this.handlePayoutVal.bind(this);\r\n\r\n        this.publicKey = React.createRef();\r\n\r\n        this.state = {\r\n            flag:true,\r\n            amount: 1,\r\n            higherVal: 5000,\r\n            payoutVal: 9910/5000,\r\n            profit: 9910/5000,\r\n            result: 0,\r\n            totalData: [],\r\n            stateData: [],\r\n            stopOnLoss: 1,\r\n            stopOnProfit: 50,\r\n            autoFlag: false,\r\n            totalProfit: 0,\r\n            stateMyData: [],\r\n            tableViewFlag: false\r\n        }\r\n    }\r\n    \r\n    componentDidMount() {\r\n        console.log(this.props.match.params.id.length);\r\n        socket.on(\"users_count\", (data)=>{\r\n            console.log(data);\r\n            this.setState({totalData: data});\r\n            rows.push(createData(1, this.state.totalData.publicKey, this.state.totalData.amount, this.state.totalData.profit, this.state.totalData.payoutVal, this.state.totalData.higherVal, this.state.totalData.roll))\r\n            this.setState({stateData:rows});\r\n            if(data.publicKey === window.ethereum.selectedAddress){\r\n                myRows.push(createData(1, data.publicKey, data.amount, data.profit, data.payoutVal, data.higherVal, data.roll));\r\n                this.setState({stateMyData:myRows});\r\n            }\r\n        })\r\n    }\r\n\r\n    handleHigherVal = (event) => {\r\n        this.setState({higherVal: event.target.value});\r\n        this.setState({payoutVal: 9910/(10000-event.target.value)})\r\n        this.setState({profit: (9910/(10000-event.target.value))*this.state.amount})\r\n    }\r\n\r\n    handleHigher = (event, value) => {\r\n        this.setState({higherVal: value});\r\n        this.setState({payoutVal: 9910/(10000-value)});\r\n        this.setState({profit: this.state.amount*(9910/(10000-value))})\r\n    }\r\n\r\n    handlePayoutVal = (event) => {\r\n        \r\n    }\r\n\r\n    handlePayout = (event, value) => {\r\n        this.setState({payoutVal: value});\r\n    }\r\n\r\n    handleAmount = (event) => {\r\n        this.setState({amount: event.target.value});\r\n        this.setState({profit: (9910/(10000-this.state.higherVal))*event.target.value})\r\n    }\r\n\r\n    amountDivision = (event) =>{\r\n        var tempAmount = this.state.amount/2;\r\n        this.setState({amount: this.state.amount/2});\r\n        this.setState({profit: this.state.payoutVal*tempAmount})\r\n    }\r\n    amountDouble = (event) =>{\r\n        var tempAmount = this.state.amount*2;\r\n        this.setState({amount: this.state.amount*2});\r\n        this.setState({profit: this.state.payoutVal*tempAmount})\r\n    }\r\n    minHigher = () =>{\r\n        this.setState({higherVal: 100});\r\n        this.setState({payoutVal: 99.1})\r\n        this.setState({profit: this.state.amount*99.1})\r\n    }\r\n    maxHigher = () =>{\r\n        this.setState({higherVal: 9910});\r\n        this.setState({payoutVal: 1})\r\n        this.setState({profit: this.state.amount*1})\r\n    }\r\n\r\n    handleOnLoss = (e) =>{\r\n        this.setState({stopOnLoss:e.target.value})\r\n    }\r\n    handleOnProfit = (e) =>{\r\n        this.setState({stopOnProfit: e.target.value})\r\n    }\r\n\r\nonBet = async () =>{\r\n    if (window.ethereum) {\r\n        var web3 = new Web3(new Web3.providers.HttpProvider(\"https://bsc-dataseed.binance.org/\"));\r\n        //console.log(web3.givenProvider.selectedAddress);\r\n        console.log(window.ethereum._metamask.isUnlocked());\r\n        let data = myContract.methods.transfer(\"0x413EBD57EbA0f200ed592c31E7dB6119C92A7973\", web3.utils.toHex(web3.utils.toWei(this.state.amount.toString()))).encodeABI();\r\n\r\n        const chainId = await window.ethereum.request({ method: 'eth_chainId' });\r\n        var txdetail = {\r\n            //\"nonce\":'0x' + lastCountOfTransaction.toString(16),\r\n            // nonce: '0x00',\r\n            from: window.ethereum.selectedAddress,\r\n            to: tokenAddress,\r\n            value: web3.utils.toHex(web3.utils.toWei(\"0\")),\r\n            gas: gasLimitHex,\r\n            gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei')),\r\n            chainId:chainId,\r\n            data:data\r\n        }\r\n        window.ethereum.request({ method: 'eth_sendTransaction', params: [txdetail] }).then( async (res) => {\r\n            console.log('res ',this.props.match.params.id);\r\n            if(window.ethereum.selectedAddress!=this.props.match.params.id && this.props.match.params.id.length==42){\r\n                Axios({\r\n                    method: \"POST\",\r\n                    url: \"http://localhost:5000/api/referral/add-profit-to-referral\",\r\n                    data:{\r\n                        publicKey: this.props.match.params.id.toLowerCase(),\r\n                        amount: this.state.amount/1000\r\n                    }\r\n                }).then((res)=>{\r\n                    console.log(res.data);\r\n                })\r\n            }\r\n\r\n            console.log(txdetail);\r\n            i++;\r\n            let randomNumber\r\n            for(var j=0; j<=15; j++){\r\n                await timeout(100);\r\n                randomNumber = Math.floor(Math.random() * 10000);\r\n                this.setState({result: randomNumber});\r\n            }\r\n            console.log(this.publicKey.current.state.publicKey);\r\n            if(randomNumber>=this.state.higherVal){\r\n                var winnerData = {\r\n                    \"publicKey\": window.ethereum.selectedAddress,\r\n                    \"amount\": this.state.amount,\r\n                    \"profit\": this.state.profit,\r\n                    \"payoutVal\": this.state.payoutVal,\r\n                    \"higherVal\": this.state.higherVal,\r\n                    \"roll\": randomNumber\r\n                }\r\n                socket.emit(\"set winner\", winnerData)\r\n            }\r\n            else{\r\n\r\n                    var loserData = {\r\n                        \"publicKey\": window.ethereum.selectedAddress,\r\n                        \"amount\": this.state.amount,\r\n                        \"profit\": 0,\r\n                        \"payoutVal\": this.state.payoutVal,\r\n                        \"higherVal\": this.state.higherVal,\r\n                        \"roll\": randomNumber\r\n                    }\r\n        \r\n                        socket.emit(\"set loser\", loserData)\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nhandleAutoBet = async () =>{\r\n    this.setState({autoFlag: !this.state.autoFlag});\r\n    await delay(500);\r\n    if(this.state.autoFlag){\r\n        if (window.ethereum) {\r\n            var web3 = new Web3(new Web3.providers.HttpProvider(\"https://bsc-dataseed.binance.org/\"));\r\n                //console.log(web3.givenProvider.selectedAddress);\r\n                console.log(window.ethereum._metamask.isUnlocked());\r\n                let data = myContract.methods.transfer(\"0x413EBD57EbA0f200ed592c31E7dB6119C92A7973\", web3.utils.toHex(web3.utils.toWei(this.state.stopOnLoss.toString()))).encodeABI();\r\n\r\n                const chainId = await window.ethereum.request({ method: 'eth_chainId' });\r\n                var txdetail = {\r\n                    //\"nonce\":'0x' + lastCountOfTransaction.toString(16),\r\n                    // nonce: '0x00',\r\n                    from: window.ethereum.selectedAddress,\r\n                    to: tokenAddress,\r\n                    value: web3.utils.toHex(web3.utils.toWei(\"0\")),\r\n                    gas: gasLimitHex,\r\n                    gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei')),\r\n                    chainId:chainId,\r\n                    data:data\r\n                }\r\n                window.ethereum.request({ method: 'eth_sendTransaction', params: [txdetail] }).then( async (res) => {\r\n                    console.log('res ',res);\r\n\r\n                    if(window.ethereum.selectedAddress!=this.props.match.params.id&&this.props.match.params.id.length==42){\r\n                        Axios({\r\n                            method: \"POST\",\r\n                            url: \"http://localhost:5000/api/referral/add-profit-to-referral\",\r\n                            data:{\r\n                                publicKey: this.props.match.params.id.toLowerCase(),\r\n                                amount: this.state.stopOnLoss/1000\r\n                            }\r\n                        }).then((res)=>{\r\n                            console.log(res.data);\r\n                        })\r\n                    }\r\n                    \r\n                    let randomNumber;\r\n                    console.log(this.state.autoFlag)\r\n                        while(this.state.totalProfit>=-1*this.state.stopOnLoss+this.state.amount&&this.state.totalProfit<=this.state.stopOnProfit-this.state.profit&&this.state.autoFlag){\r\n                            randomNumber = Math.floor(Math.random() * 10000);\r\n                            console.log(randomNumber)\r\n                            await delay(100);\r\n                            if(randomNumber>=this.state.higherVal){\r\n                                // this.state.totalProfit+=this.state.profit-this.state.amount;\r\n                                this.setState({totalProfit:this.state.totalProfit+this.state.profit-this.state.amount})\r\n                            }\r\n                            else{\r\n                                // this.state.totalProfit-=this.state.amount;\r\n                                this.setState({totalProfit:this.state.totalProfit-this.state.amount})\r\n                            }\r\n                        }\r\n                        var autoData = {\r\n                            \"publicKey\": window.ethereum.selectedAddress,\r\n                            \"amount\": this.state.stopOnLoss,\r\n                            \"profit\": this.state.totalProfit,\r\n                            \"payoutVal\": this.state.payoutVal,\r\n                            \"higherVal\": this.state.higherVal,\r\n                            \"roll\": \"autoBet\"\r\n                        }\r\n                        socket.emit(\"set autoBet\", autoData);\r\n                        console.log(\"wowow\",this.state.totalProfit)\r\n                        this.setState({autoFlag: false})\r\n                    })\r\n        }\r\n    }\r\n}\r\n\r\nhandleAllPlayer = () =>{\r\n    this.setState({tableViewFlag: false})\r\n  }\r\n\r\n  handleMyBets = () =>{\r\n    this.setState({tableViewFlag: true})\r\n  }\r\n\r\n    render() {\r\n        const style1 = {backgroundImage: \"linear-gradient( to right,#14aafc 0%,#4f52ee 100% )\" }\r\n        const style2 = {backgroundImage: \"linear-gradient( to right,#d30c90 0%,#7d02c6 100% )\" }\r\n        const style3 = {backgroundImage: \"linear-gradient( to right,#f2882b 0%,#fb6a49 100% )\" }\r\n        const style4 = {backgroundImage: \"linear-gradient( to right,#33bae4 0%,#d929fb 100% )\" }\r\n        const cardTitle = \"Dice I\";\r\n        return (\r\n            <div>\r\n                <div className=\"dashboard\" style={rootStyle}>\r\n                    <Header ref = {this.publicKey} />\r\n                    <Grid container spacing={3} className=\"diceGrid\" justify=\"center\">\r\n                        <Grid item xs={12} sm={12} md={12} >\r\n                            <div className=\"diceTitle\" style={style1}>\r\n                                {cardTitle}\r\n                                <img src={diceBlue} />\r\n                            </div>\r\n                            \r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container spacing={3} className=\"diceGrid\" justify=\"center\">\r\n                        <Grid item xs={12} sm={6} md={3} className=\"diceInfo\">\r\n                            <p>Bet Amount</p>\r\n                            <input type=\"text\" className=\"infoCard\" value = {this.state.amount} onChange = {this.handleAmount} />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6} md={3} className=\"diceInfo\">\r\n                            <p>Higher (>=)</p>\r\n                            <input className=\"infoCard\" value={this.state.higherVal} onChange={this.handleHigherVal} min = \"1\" max = \"10000\"/>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6} md={3} className=\"diceInfo\">\r\n                            <p>Payout (x)</p>\r\n                            <input className=\"infoCard\" value={this.state.payoutVal.toFixed(3)} onChange={this.handlePayoutVal} />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6} md={3} className=\"diceInfo\">\r\n                            <p>Profit (SLSH)</p>\r\n                            <input className=\"infoCard\" value={this.state.profit.toFixed(3)} />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6} md={3} className=\"diceBtn1\">\r\n                            <button onClick = {this.amountDivision}>1/2</button>\r\n                            <button onClick = {this.amountDouble}>2x</button>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6} md={3} className=\"diceBtn1\">\r\n                            <button onClick = {this.minHigher}>Min</button>\r\n                            <button onClick = {this.maxHigher}>Max</button>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6} md={6} className=\"diceBtn3\">\r\n                            <button onClick = {this.onBet}>BET</button>\r\n                        </Grid>\r\n                    </Grid>\r\n                    \r\n                    <Grid container spacing={3} className=\"diceGrid levelGrid\" justify=\"center\">\r\n                        <Grid container>\r\n                            <Grid item md={3} sm={3} xs={3} className=\"lower\">\r\n                                LOWER\r\n                            </Grid>\r\n                            <Grid item md={9} xs={9} sm={9}className=\"higher\">\r\n                                HIGHER\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12} sm={12} >\r\n                                <PayoutSlide valueLabelDisplay=\"auto\" aria-label=\"pretto slider\" value={this.state.higherVal, this.state.higherVal} onChange={this.handleHigher} min={0} max={10000} step={1}/>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <HigherSlide valueLabelDisplay=\"auto\" aria-label=\"pretto slider\" value={this.state.result, this.state.result} min={0} max={10000}/>\r\n                        <p className=\"progressTitle\">{`Result : ${this.state.result} >= ${this.state.higherVal}`}</p>\r\n                    </Grid>\r\n                    \r\n                    <Grid container spacing={3} className=\"autoGrid\" justify=\"center\">\r\n                        <Grid item xs={12} sm={12} md={12}>\r\n                            <button type=\"button\" className=\"playBtn autoBtn\" style={style2}>Go to Automatic Bets</button>\r\n                        </Grid>\r\n                    </Grid>\r\n                    \r\n                    <Grid container spacing={3} className=\"diceGrid-table-top resultGrid\" justify=\"center\">\r\n                        <Grid item md={9} sm={12} xs={12} >\r\n                            <Grid container>\r\n                                <Grid item md={6} sm={12} xs={12} className=\"winorlose\">\r\n                                    <p>Stop On Loss (unlimited)</p>\r\n                                    <input type=\"text\" className=\"unlimitedText\" defaultValue=\"10\" value = {this.state.stopOnLoss} onChange = {this.handleOnLoss}/>\r\n                                    <p>On Win</p>\r\n                                    <div className=\"winloseBtn\">\r\n                                        <button className=\"groupBtn reset1\" onClick = {()=>this.setState({stopOnLoss: 10})}>Reset</button>\r\n                                        <button className=\"groupBtn increase1\" onClick = {()=>this.setState({stopOnLoss: Number(this.state.stopOnLoss)})}>Increase</button>\r\n                                    </div>\r\n                                </Grid>\r\n                                <Grid item md={6} sm={12} xs={12} className=\"winorlose\">\r\n                                    <p>Stop On Profit (unlimited)</p>\r\n                                    <input type=\"text\" className=\"unlimitedText\" defaultValue=\"10\" value = {this.state.stopOnProfit} onChange = {this.handleOnProfit}/>\r\n                                    <p>On Lose</p>\r\n                                    <div className=\"winloseBtn\">\r\n                                        <button className=\"groupBtn reset2\" onClick = {()=>this.setState({stopOnProfit: 10})}>Reset</button>\r\n                                        <button className=\"groupBtn increase2\" onClick = {()=>this.setState({stopOnProfit: Number(this.state.stopOnProfit)+1})}>Increase</button>\r\n                                    </div>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item md={3} sm={12} xs={12}>\r\n                            <Grid container>\r\n                                <Grid item md={12} sm={12} xs={12}>\r\n                                    <button type=\"button\" className=\"startBtn\" style={style2} onClick = {this.handleAutoBet}>{this.state.autoFlag?\"stop\":\"start\"}</button>\r\n                                </Grid>\r\n                                <Grid item md={12} sm={12} xs={12}>\r\n                                    <div className = \"x-classic-betting-state\">\r\n                                        {this.state.totalProfit}\r\n                                    </div>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <img src={dice1} alt=\"dice1\" className=\"homeDice1\"/>\r\n                    <img src={dice2} alt=\"dice2\" className=\"homeDice2\"/>\r\n                    <img src={dice3} alt=\"dice3\" className=\"homeDice3\"/>\r\n                    <img src={dice4} alt=\"dice4\" className=\"homeDice4\"/>\r\n                    <img src={effect} alt=\"effect\" className=\"homeEffect\"/>\r\n                </div>\r\n                <div style = {{backgroundColor: \"#76006c\"}}>\r\n                    <Grid container spacing={3} className=\"diceGridTable\" justify=\"center\">\r\n                        <Grid item xs={12} sm={12} md={12} className=\"tableButtons\">\r\n                            <p>Live Player Bets</p>\r\n                            <div className=\"tableBtns\">\r\n                                <button className=\"allPlayers\" onClick = {this.handleAllPlayer}>All Players</button>\r\n                                <button className=\"allPlayers\" onClick = {this.handleMyBets}>My bets</button>\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={12} md={12}>\r\n                            <LiveTable rows = {!this.state.tableViewFlag?this.state.stateData:this.state.stateMyData} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n                <Footer></Footer>\r\n            </div>\r\n        )\r\n    }\r\n  }\r\n  \r\n// const mapStateToProps = state => {\r\n//     return {\r\n//         items: state,\r\n//     }\r\n// }\r\n\r\n// const mapDispatchToProps = {\r\n//     setItems,\r\n//     updateTimer\r\n// }\r\n  \r\nexport default DiceLL;\r\n","D:\\workspace\\react\\betting demos\\project\\client\\src\\components\\Footer.js",[],"D:\\workspace\\react\\betting demos\\project\\client\\src\\components\\LiveTable.js",[],"D:\\workspace\\react\\betting demos\\project\\client\\src\\components\\farming_card2.js",[],"D:\\workspace\\react\\betting demos\\project\\client\\src\\components\\farming_card1.js",[],"D:\\workspace\\react\\betting demos\\project\\client\\src\\components\\referral_table.js",["195","196"],"import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Axios from 'axios';\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    fontFamily: \"TypoRoundBold\",\r\n    color: theme.palette.common.white,\r\n    border: 'none',\r\n    fontSize: 23\r\n  },\r\n  body: {\r\n    fontFamily: \"TypoRoundBold\",\r\n    fontSize: 23,\r\n    color: \"#8f8391\",\r\n    borderBottom: '1px solid #5e2764'\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: \"rgba(64,3,73, 0.8)\",\r\n  },\r\n}))(TableRow);\r\n\r\nfunction createData(id,referralId, TT) {\r\n  return { id, referralId, TT};\r\n}\r\n\r\nconst rows = [\r\n  \r\n];\r\n\r\nconst profitStyle = {\r\n  color: \"#6cda22\"\r\n}\r\n\r\nclass LiveTable extends React.Component {\r\n\r\n  componentDidMount () {\r\n    Axios({\r\n      method: \"POST\",\r\n      url: \"http://localhost:5000/api/referral/get-all-referral\"\r\n    })\r\n    .then(res=>{\r\n      var temp1 = 0;\r\n      var temp2 = 0;\r\n      var temp1_add;\r\n      var temp2_add;\r\n      if(res.data.length>=2){\r\n        res.data.map((element)=>{\r\n          if(element.amount>=temp1){\r\n            temp2 = temp1;\r\n            temp2_add = temp1_add;\r\n            temp1 = element.amount;\r\n            temp1_add = element.publicKey\r\n          }\r\n          console.log(\"temp\", temp1, temp2)\r\n        })\r\n      }\r\n      else{\r\n        rows.push(createData(1,res.data[0].publicKey, `+${res.data[0].amount} SLSH`))\r\n        console.log(rows)\r\n      }\r\n\r\n\r\n    })\r\n  }\r\n  render () {\r\n    return (\r\n      <TableContainer component={Paper} className=\"tableContainer\">\r\n        <Table aria-label=\"customized table\">\r\n          <TableHead>\r\n            <TableRow className=\"tableRow\">\r\n              <StyledTableCell align=\"center\">Referall ID</StyledTableCell>\r\n              <StyledTableCell align=\"center\">SLSH</StyledTableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.map((row) => (\r\n              <StyledTableRow key={row.id}>\r\n                <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">{row.referralId}</StyledTableCell>\r\n                <StyledTableCell align=\"center\" style={profitStyle}>{row.TT}</StyledTableCell>\r\n              </StyledTableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    )\r\n  }\r\n}\r\nexport default LiveTable;\r\n","D:\\workspace\\react\\betting demos\\project\\client\\src\\components\\Header.js",["197","198","199"],"import React from 'react';\r\n// import '../App.css';\r\nimport Web3 from 'web3';\r\n// import { Grid } from '@material-ui/core';\r\nimport logo from '../assets/img/logo.png';\r\nimport { Navbar, NavDropdown, Nav, Form, Button } from 'react-bootstrap';\r\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\r\nimport Actions from '../actions/actions';\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\n\r\nvar socket;\r\n\r\nclass Header extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.connectMetamask = this.connectMetamask.bind(this);\r\n\r\n    this.state = {\r\n        publicKey: \"connect\",\r\n        clickConnectButton: false,\r\n        endpoint: \"http://localhost:5000/\"\r\n    }\r\n    socket = socketIOClient(this.state.endpoint);\r\n  }\r\n\r\nconnectMetamask = ()=>{\r\n  this.setState({clickConnectButton: true});\r\n  var temp_public_key;\r\n  var web3 = new Web3();\r\n  if (window.ethereum) {\r\n    web3 = new Web3(window.ethereum);\r\n    try {\r\n      window.ethereum.enable().then((res)=> {\r\n        var returnStr = web3.currentProvider.selectedAddress;\r\n        temp_public_key = returnStr;\r\n        console.log(\"public key is \", temp_public_key);\r\n        var key_short = temp_public_key.slice(0, 6);\r\n        this.setState({publicKey: key_short+\"...\"})\r\n        // User has allowed account access to DApp...\r\n      });\r\n    } catch (e) {\r\n      // User has denied account access to DApp...\r\n    }\r\n  }\r\n  // Legacy DApp Browsers\r\n  else if (window.web3) {\r\n    // web3 = new Web3(web3.currentProvider);\r\n  }\r\n  // Non-DApp Browsers\r\n  else {\r\n    alert(\"You have to install MetaMask !\");\r\n  }\r\n}\r\ncomponentWillMount(){\r\n    var temp_public_key;\r\n    var key_short;\r\n    var web3 = new Web3();\r\n    web3 = new Web3(window.ethereum);\r\n      web3.eth.getAccounts((err, accounts)=>{\r\n        if (err != null) console.log(\"An error occurred\");\r\n        else if (accounts.length == 0) console.log(\"User is not logged in to MetaMask\");\r\n        else {\r\n          var returnStr = web3.currentProvider.selectedAddress;\r\n          temp_public_key = returnStr;\r\n          console.log(\"public key is \", temp_public_key);\r\n          var key_short = temp_public_key.slice(0, 6);\r\n          this.setState({publicKey: key_short+\"...\"})\r\n        }\r\n    });\r\n    // if (window.ethereum) {\r\n\r\n    // }\r\n    // else{\r\n    // }\r\n}\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"header\">\r\n        <Navbar expand=\"lg\">\r\n            <Navbar.Brand href=\"/\"><img src={logo} alt=\"logo\"/></Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                <Nav.Link href=\"/\">Home</Nav.Link>\r\n                {/* <Nav.Link href=\"/investment\">Investment</Nav.Link>\r\n                <Nav.Link href=\"/dividend\">Dividend</Nav.Link> */}\r\n                <Nav.Link href=\"/#/referral\">Referral</Nav.Link>\r\n                <NavDropdown title=\"Games\" id=\"basic-nav-dropdown\" className = \"x-nav-dropdown\">\r\n                    <NavDropdown.Item href=\"/#/classic-dice\">Dice I</NavDropdown.Item>\r\n                    <NavDropdown.Item href=\"/#/dice-ii\">Dice II</NavDropdown.Item>\r\n                    {/* <NavDropdown.Item href=\"/#/be-careful\">Careful</NavDropdown.Item>\r\n                    <NavDropdown.Item href=\"/#/dice-ii-2\">Farming</NavDropdown.Item> */}\r\n                </NavDropdown>\r\n                </Nav>\r\n                <Form inline>\r\n                    <Button className=\"loginBtn\" onClick = {this.connectMetamask}><LockOpenIcon />{this.state.publicKey}</Button>\r\n                </Form>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport {Header, socket};\r\n\r\n","D:\\workspace\\react\\betting demos\\project\\client\\src\\components\\careful_card2.js",[],"D:\\workspace\\react\\betting demos\\project\\client\\src\\components\\careful_card1.js",[],"D:\\workspace\\react\\betting demos\\project\\client\\src\\components\\referal_card.js",[],"D:\\workspace\\react\\betting demos\\project\\client\\src\\components\\careful_card3.js",[],"D:\\workspace\\react\\betting demos\\project\\client\\src\\components\\Card.js",[],"D:\\workspace\\react\\betting demos\\project\\client\\src\\actions\\actions.js",[],{"ruleId":"200","replacedBy":"201"},{"ruleId":"202","replacedBy":"203"},{"ruleId":"204","severity":1,"message":"205","line":6,"column":8,"nodeType":"206","messageId":"207","endLine":6,"endColumn":21},{"ruleId":"208","severity":1,"message":"209","line":14,"column":3,"nodeType":"206","endLine":14,"endColumn":12,"suggestions":"210"},{"ruleId":"208","severity":1,"message":"211","line":14,"column":14,"nodeType":"212","endLine":26,"endColumn":4},{"ruleId":"204","severity":1,"message":"213","line":2,"column":10,"nodeType":"206","messageId":"207","endLine":2,"endColumn":23},{"ruleId":"204","severity":1,"message":"214","line":4,"column":8,"nodeType":"206","messageId":"207","endLine":4,"endColumn":17},{"ruleId":"204","severity":1,"message":"215","line":14,"column":22,"nodeType":"206","messageId":"207","endLine":14,"endColumn":32},{"ruleId":"204","severity":1,"message":"216","line":38,"column":7,"nodeType":"206","messageId":"207","endLine":38,"endColumn":18},{"ruleId":"204","severity":1,"message":"217","line":63,"column":9,"nodeType":"206","messageId":"207","endLine":63,"endColumn":20},{"ruleId":"204","severity":1,"message":"218","line":100,"column":15,"nodeType":"206","messageId":"207","endLine":100,"endColumn":21},{"ruleId":"204","severity":1,"message":"219","line":102,"column":15,"nodeType":"206","messageId":"207","endLine":102,"endColumn":21},{"ruleId":"220","severity":1,"message":"221","line":113,"column":29,"nodeType":"222","endLine":113,"endColumn":53},{"ruleId":"204","severity":1,"message":"214","line":3,"column":8,"nodeType":"206","messageId":"207","endLine":3,"endColumn":17},{"ruleId":"204","severity":1,"message":"223","line":4,"column":17,"nodeType":"206","messageId":"207","endLine":4,"endColumn":23},{"ruleId":"204","severity":1,"message":"215","line":13,"column":22,"nodeType":"206","messageId":"207","endLine":13,"endColumn":32},{"ruleId":"204","severity":1,"message":"224","line":32,"column":7,"nodeType":"206","messageId":"207","endLine":32,"endColumn":18},{"ruleId":"204","severity":1,"message":"216","line":50,"column":7,"nodeType":"206","messageId":"207","endLine":50,"endColumn":18},{"ruleId":"204","severity":1,"message":"217","line":75,"column":9,"nodeType":"206","messageId":"207","endLine":75,"endColumn":20},{"ruleId":"204","severity":1,"message":"225","line":11,"column":8,"nodeType":"206","messageId":"207","endLine":11,"endColumn":18},{"ruleId":"204","severity":1,"message":"226","line":12,"column":8,"nodeType":"206","messageId":"207","endLine":12,"endColumn":18},{"ruleId":"204","severity":1,"message":"219","line":88,"column":15,"nodeType":"206","messageId":"207","endLine":88,"endColumn":21},{"ruleId":"204","severity":1,"message":"227","line":89,"column":15,"nodeType":"206","messageId":"207","endLine":89,"endColumn":21},{"ruleId":"204","severity":1,"message":"228","line":14,"column":8,"nodeType":"206","messageId":"207","endLine":14,"endColumn":16},{"ruleId":"204","severity":1,"message":"225","line":15,"column":8,"nodeType":"206","messageId":"207","endLine":15,"endColumn":18},{"ruleId":"204","severity":1,"message":"226","line":16,"column":8,"nodeType":"206","messageId":"207","endLine":16,"endColumn":18},{"ruleId":"204","severity":1,"message":"215","line":17,"column":22,"nodeType":"206","messageId":"207","endLine":17,"endColumn":32},{"ruleId":"204","severity":1,"message":"229","line":19,"column":10,"nodeType":"206","messageId":"207","endLine":19,"endColumn":14},{"ruleId":"204","severity":1,"message":"230","line":106,"column":7,"nodeType":"206","messageId":"207","endLine":106,"endColumn":8},{"ruleId":"204","severity":1,"message":"231","line":224,"column":9,"nodeType":"206","messageId":"207","endLine":224,"endColumn":10},{"ruleId":"204","severity":1,"message":"219","line":330,"column":15,"nodeType":"206","messageId":"207","endLine":330,"endColumn":21},{"ruleId":"204","severity":1,"message":"227","line":331,"column":15,"nodeType":"206","messageId":"207","endLine":331,"endColumn":21},{"ruleId":"220","severity":1,"message":"221","line":341,"column":33,"nodeType":"222","endLine":341,"endColumn":55},{"ruleId":"232","severity":1,"message":"233","line":386,"column":125,"nodeType":"234","messageId":"235","endLine":386,"endColumn":126},{"ruleId":"232","severity":1,"message":"233","line":389,"column":114,"nodeType":"234","messageId":"235","endLine":389,"endColumn":115},{"ruleId":"204","severity":1,"message":"214","line":4,"column":8,"nodeType":"206","messageId":"207","endLine":4,"endColumn":17},{"ruleId":"204","severity":1,"message":"215","line":14,"column":22,"nodeType":"206","messageId":"207","endLine":14,"endColumn":32},{"ruleId":"204","severity":1,"message":"224","line":20,"column":7,"nodeType":"206","messageId":"207","endLine":20,"endColumn":18},{"ruleId":"204","severity":1,"message":"216","line":38,"column":7,"nodeType":"206","messageId":"207","endLine":38,"endColumn":18},{"ruleId":"204","severity":1,"message":"217","line":63,"column":9,"nodeType":"206","messageId":"207","endLine":63,"endColumn":20},{"ruleId":"204","severity":1,"message":"218","line":100,"column":15,"nodeType":"206","messageId":"207","endLine":100,"endColumn":21},{"ruleId":"204","severity":1,"message":"236","line":101,"column":15,"nodeType":"206","messageId":"207","endLine":101,"endColumn":21},{"ruleId":"204","severity":1,"message":"227","line":103,"column":15,"nodeType":"206","messageId":"207","endLine":103,"endColumn":21},{"ruleId":"220","severity":1,"message":"221","line":113,"column":29,"nodeType":"222","endLine":113,"endColumn":53},{"ruleId":"204","severity":1,"message":"237","line":13,"column":8,"nodeType":"206","messageId":"207","endLine":13,"endColumn":16},{"ruleId":"204","severity":1,"message":"225","line":15,"column":8,"nodeType":"206","messageId":"207","endLine":15,"endColumn":18},{"ruleId":"204","severity":1,"message":"226","line":16,"column":8,"nodeType":"206","messageId":"207","endLine":16,"endColumn":18},{"ruleId":"204","severity":1,"message":"215","line":17,"column":22,"nodeType":"206","messageId":"207","endLine":17,"endColumn":32},{"ruleId":"204","severity":1,"message":"229","line":19,"column":10,"nodeType":"206","messageId":"207","endLine":19,"endColumn":14},{"ruleId":"204","severity":1,"message":"230","line":106,"column":7,"nodeType":"206","messageId":"207","endLine":106,"endColumn":8},{"ruleId":"204","severity":1,"message":"231","line":232,"column":17,"nodeType":"206","messageId":"207","endLine":232,"endColumn":18},{"ruleId":"204","severity":1,"message":"218","line":330,"column":15,"nodeType":"206","messageId":"207","endLine":330,"endColumn":21},{"ruleId":"204","severity":1,"message":"219","line":332,"column":15,"nodeType":"206","messageId":"207","endLine":332,"endColumn":21},{"ruleId":"204","severity":1,"message":"227","line":333,"column":15,"nodeType":"206","messageId":"207","endLine":333,"endColumn":21},{"ruleId":"220","severity":1,"message":"221","line":343,"column":33,"nodeType":"222","endLine":343,"endColumn":55},{"ruleId":"232","severity":1,"message":"233","line":388,"column":125,"nodeType":"234","messageId":"235","endLine":388,"endColumn":126},{"ruleId":"232","severity":1,"message":"233","line":391,"column":114,"nodeType":"234","messageId":"235","endLine":391,"endColumn":115},{"ruleId":"204","severity":1,"message":"228","line":14,"column":8,"nodeType":"206","messageId":"207","endLine":14,"endColumn":16},{"ruleId":"204","severity":1,"message":"225","line":15,"column":8,"nodeType":"206","messageId":"207","endLine":15,"endColumn":18},{"ruleId":"204","severity":1,"message":"226","line":16,"column":8,"nodeType":"206","messageId":"207","endLine":16,"endColumn":18},{"ruleId":"204","severity":1,"message":"215","line":17,"column":22,"nodeType":"206","messageId":"207","endLine":17,"endColumn":32},{"ruleId":"204","severity":1,"message":"229","line":19,"column":10,"nodeType":"206","messageId":"207","endLine":19,"endColumn":14},{"ruleId":"204","severity":1,"message":"230","line":108,"column":5,"nodeType":"206","messageId":"207","endLine":108,"endColumn":6},{"ruleId":"238","severity":1,"message":"239","line":226,"column":47,"nodeType":"240","messageId":"241","endLine":226,"endColumn":49},{"ruleId":"238","severity":1,"message":"242","line":226,"column":112,"nodeType":"240","messageId":"241","endLine":226,"endColumn":114},{"ruleId":"204","severity":1,"message":"231","line":240,"column":13,"nodeType":"206","messageId":"207","endLine":240,"endColumn":14},{"ruleId":"238","severity":1,"message":"239","line":301,"column":55,"nodeType":"240","messageId":"241","endLine":301,"endColumn":57},{"ruleId":"238","severity":1,"message":"242","line":301,"column":118,"nodeType":"240","messageId":"241","endLine":301,"endColumn":120},{"ruleId":"204","severity":1,"message":"219","line":356,"column":15,"nodeType":"206","messageId":"207","endLine":356,"endColumn":21},{"ruleId":"204","severity":1,"message":"227","line":357,"column":15,"nodeType":"206","messageId":"207","endLine":357,"endColumn":21},{"ruleId":"220","severity":1,"message":"221","line":367,"column":33,"nodeType":"222","endLine":367,"endColumn":55},{"ruleId":"232","severity":1,"message":"233","line":412,"column":125,"nodeType":"234","messageId":"235","endLine":412,"endColumn":126},{"ruleId":"232","severity":1,"message":"233","line":415,"column":114,"nodeType":"234","messageId":"235","endLine":415,"endColumn":115},{"ruleId":"243","severity":1,"message":"244","line":58,"column":31,"nodeType":"212","messageId":"245","endLine":58,"endColumn":33},{"ruleId":"204","severity":1,"message":"246","line":61,"column":13,"nodeType":"206","messageId":"207","endLine":61,"endColumn":22},{"ruleId":"204","severity":1,"message":"247","line":8,"column":8,"nodeType":"206","messageId":"207","endLine":8,"endColumn":15},{"ruleId":"204","severity":1,"message":"248","line":57,"column":9,"nodeType":"206","messageId":"207","endLine":57,"endColumn":18},{"ruleId":"238","severity":1,"message":"242","line":62,"column":34,"nodeType":"240","messageId":"241","endLine":62,"endColumn":36},"no-native-reassign",["249"],"no-negated-in-lhs",["250"],"no-unused-vars","'DialogActions' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setOpen'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.",["251"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'BrowserRouter' is defined but never used.","'LiveTable' is defined but never used.","'makeStyles' is defined but never used.","'HigherSlide' is assigned a value but never used.","'PayoutSlide' is assigned a value but never used.","'style1' is assigned a value but never used.","'style3' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'socket' is defined but never used.","'ColoredLine' is assigned a value but never used.","'diceYellow' is defined but never used.","'dicePurple' is defined but never used.","'style4' is assigned a value but never used.","'dicePink' is defined but never used.","'wait' is defined but never used.","'k' is assigned a value but never used.","'i' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'style2' is assigned a value but never used.","'diceBlue' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","'temp2_add' is assigned a value but never used.","'Actions' is defined but never used.","'key_short' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"252","fix":"253"},"Add dependencies array: []",{"range":"254","text":"255"},[910,910],", []"]